---
title: "R Notebook"
output:
  html_document:
    df_print: paged
---

# Establish Workspace
```{r}
library(Matrix)
library(Seurat)
library(dplyr)
library(ggcyto)
library(RColorBrewer)
library(lisi)

# Set data directory
dd <- "~/OneDrive - Emory University/Ghosn_Lab/scRNA_Data/PBMC/"
colors.use <- c(brewer.pal(8, 'Set1')[c(1:5,7:8)], brewer.pal(7, 'Dark2'),  'blue4', 'orangered', 'orangered4', c(brewer.pal(12, 'Paired'), brewer.pal(6, 'Accent'))[c(1:10, 12, 15:20)])
# Function to z-score each PC's percentage of the total variance captured
TestPCA <- function(object = NULL, 
                    genes.use = object@assays$RNA@var.features,
                    mtx.use = object@assays$RNA@scale.data){
  data.use <- mtx.use[genes.use, ]
  pca.results <- svd(x = t(data.use))
  sdev <- pca.results$d/sqrt(max(1, ncol(data.use) - 1))
  PCVariance <- rbind(SD = sdev,
                      Proportion = (sdev^2)/sum(sdev^2), 
                      Cumulative = cumsum(sdev^2)/sum(sdev^2))
  m <- mean(PCVariance['Proportion', ])
  s <- sd(PCVariance['Proportion', ])
  PCVariance <- rbind(PCVariance, 
                      ZScore = (PCVariance['Proportion', ] - m)/s)
  return(PCVariance)
}
# Function to select mitochondrial percent by X Std Dev above median
MitoFilter <- function(obj){
  max.mito <<- 5*sd(obj$percent.mito) + median(obj$percent.mito)
  obj <- obj %>% subset(percent.mito < max.mito) %>% subset(nFeature_RNA > 100)
  return(obj)
  rm(max.mito)
}
# Function to correct ADT names
split.CD <- function(x){
  toupper(trimws(unlist(lapply(strsplit(x, "_"), '[[', 1))))
}
```
# Single-sample cell typing
## PBMC 4-A
```{r}
# Read in filtered GEX matrix for PBMC 4-A (PBMC H1 Batch 1)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC3_46yoM_H1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.4A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`)
rm(mtx.list)
# Read in dsb-corrected ADT matrix
dsb.mtx <- read.csv("./Data/PBMC4A_DSB.csv", row.names = 1, header = T)
# Sub DSB "XXX.1" cell IDs for Seurat "XXX-1" cell IDs
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.4A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)
# Add mitochondrial percentage
PBMC.4A[["percent.mito"]] <- PercentageFeatureSet(PBMC.4A, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.4A[["percent.ribo"]] <- PercentageFeatureSet(PBMC.4A, pattern = "^RP(S|L)")
saveRDS(PBMC.4A, "./Data/Export/PBMCSample4.A.rds")

# Run "standard" Seurat workflow
PBMC.4A <- PBMC.4A %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
#PBMC.4A.pca.test <- TestPCA(PBMC.4A, do.return = T)
# 16 PCs with z > 1
#rm(PBMC.4A.pca.test)
PBMC.4A <- PBMC.4A %>% 
           RunUMAP(reduction = "pca", dims = 1:16) %>%
           FindNeighbors(reduction = "pca", dims = 1:16) %>%
           FindClusters(resolution = .8)

p <- DimPlot(PBMC.4A, reduction = "umap", cols = colors.use) + 
     ggtitle("PBMC Clusters") +
     theme(legend.position = "none")
p
ggsave("./Figures/PBMC4A_Gating_01.pdf")

d <- as.data.frame(FetchData(object = PBMC.4A, 
                   vars = c("CD20-TotalSeqC", "CD19-TotalSeqC", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("adt_CD20.TotalSeqC", "adt_CD19.TotalSeqC", "colors")
p <- FeatureScatter(PBMC.4A, "CD20-TotalSeqC", "CD19-TotalSeqC",
                    cols = colors.use, plot.cor = F) +
     geom_density2d(data = d, color = "black", size = 1) +
     theme_gray() + theme(legend.position = "none") + 
     labs(x = "CD20 (ADT)", 
          y = "CD19 (ADT)")
p
ggsave("./Figures/PBMC4A_Gating_02.pdf", p)
# clusters 6, 9 = B cells

# Naive B cells
b.cells <- subset(PBMC.4A, `adt_CD20-TotalSeqC` > 25 | `adt_CD19-TotalSeqC` > 10)
b.cells[["IGD"]] <- colSums(b.cells@assays$RNA@data[grep("^IGHD", rownames(b.cells)), ])

VlnPlot(b.cells, "IGD")
FeaturePlot(b.cells, "IGD")

d <- as.data.frame(FetchData(object = b.cells, 
                   vars = c("IGD", "CD27-TotalSeqC", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("IGD", "adt_CD27.TotalSeqC", "colors")
p <- FeatureScatter(b.cells, "CD27-TotalSeqC", "IGD", plot.cor = F,
                    cols = colors.use[c(2, 4, 7, 9, 10, 14, 15)]) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(x = "CD27 (ADT)", 
          y = "Total IGHD Expression (RNA)") + theme_gray() + 
     theme(legend.position = "none") +
     coord_cartesian(ylim = c(-0.3, 3.5), expand = T)
p
ggsave("./Figures/PBMC4A_Gating_03.pdf", p)
# cluster 6 = naive B cells
rm(b.cells)

non.classified <- subset(PBMC.4A, idents = c(6, 9), invert = T)
d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("CD56-TotalSeqC", "CD14-TotalSeqC", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("adt_CD56.TotalSeqC", "adt_CD14.TotalSeqC", "colors")
p <- FeatureScatter(non.classified, "CD14-TotalSeqC", "CD56-TotalSeqC", plot.cor = F, 
                    cols = colors.use[c(1:6, 8:9, 11:17)], pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(x = "CD14 (ADT)", 
          y = "CD56 (ADT)") + theme_gray() + 
     theme(legend.position = "none") 
p
ggsave("./Figures/PBMC4A_Gating_04.pdf")
# clusters 3, 4, 5, 12 = NK cells

DimPlot(non.classified, reduction = "umap", cols = colors.use)

nk.cells <- subset(PBMC.4A, idents = c(3, 4, 5, 12))
d <- as.data.frame(FetchData(object = nk.cells, 
                   vars = c("NKG7", "CD3-TotalSeqC", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("NKG7", "adt_CD3.TotalSeqC", "colors")
p <- FeatureScatter(nk.cells, "CD3-TotalSeqC", "NKG7", 
                    cols = colors.use[c(4, 5, 6, 14)], pt.size = 3, plot.cor = F) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(x = "CD3 (ADT)", 
          y = "NKG7 (RNA)") + theme_gray() + 
     theme(legend.position = "none")
p
ggsave("./Figures/PBMC4A_Gating_05.pdf")
# cluster 12 = CD56Hi NK cells, Clusters 3 & 4 = NK Cells, 5 = NKT
rm(nk.cells)

non.classified <- subset(PBMC.4A, idents = c(6, 9, 3, 4, 12, 5), invert = T)

DimPlot(non.classified, reduction = "umap", cols = colors.use)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("CD16-TotalSeqC", "CD14-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("adt_CD16.TotalSeqC", "adt_CD14.TotalSeqC", "colors")
p <- FeatureScatter(non.classified, "CD14-TotalSeqC", "CD16-TotalSeqC", 
                    cols = colors.use[c(1:3, 8:9, 11:12, 14:17)], pt.size = 3, plot.cor = F) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(x = "CD14 (ADT)", 
          y = "CD16 (ADT)") + theme_gray() + 
     theme(legend.position = "none")
p
ggsave("./Figures/PBMC4A_Gating_06.pdf")
DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)

# Cluster 8 = classical monocytes, 13 = non-classical monocytes

non.classified <- subset(PBMC.4A, idents = c(6, 9, 3, 4, 12, 5, 8, 13), invert = T)
non.classified[["HSPC_gate"]] <- rep("Other Clusters", nrow(non.classified[[]]))
HSPC.cells <- WhichCells(non.classified, idents = 16)
non.classified@meta.data[HSPC.cells, "HSPC_gate"] <- "16"
non.classified@meta.data[, "HSPC_gate"] <- factor(non.classified@meta.data[, "HSPC_gate"],
                                                  levels = c("Other Clusters", "16"))
VlnPlot(non.classified, "CD34", cols = colors.use[c(1:3, 8, 11:12, 15:17)],
        group.by = "HSPC_gate")
ggsave("./Figures/PBMC4A_Gating_07.pdf")
# Cluster 16 = HSPCs

non.classified <- subset(PBMC.4A, idents = c(6, 9, 3, 4, 12, 8, 5, 13, 16), invert = T)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("CD8a-TotalSeqC", "CD4-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("adt_CD8a.TotalSeqC", "adt_CD4.TotalSeqC", "colors")
p <- FeatureScatter(non.classified, "CD8a-TotalSeqC", "CD4-TotalSeqC", 
                    cols = colors.use[c(1:3, 8, 11:12, 15:16)], pt.size = 3, plot.cor = F) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(x = "CD8a (ADT)", 
          y = "CD4 (ADT)") + theme_gray() + 
     theme(legend.position = "none")
p
ggsave("./Figures/PBMC4A_Gating_08.pdf")

rm(d)
rm(p)
# 0, 1, 2, 15 = CD4+ T-cell; 7, 11 = CD8+ T-cell
FeaturePlot(non.classified, "CD4-TotalSeqC", pt.size = 3)
UMAPPlot(non.classified, cols = colors.use, pt.size = 3)
# Remove CD8 T-Cells
non.classified <- subset(PBMC.4A, idents = c(6, 9, 3, 4, 12, 8, 5, 13, 16, 7, 11), invert = T)
non.classified[["TReg_gate"]] <- rep("Other CD4+", nrow(non.classified[[]]))
TReg.cells <- WhichCells(non.classified, idents = 10)
non.classified@meta.data[TReg.cells, "TReg_gate"] <- "10"
non.classified@meta.data[, "TReg_gate"] <- factor(non.classified@meta.data[, "TReg_gate"],
                                                  levels = c("Other CD4+", "10"))
VlnPlot(non.classified, "FOXP3", cols = colors.use[c(11, 15)],
        group.by = "TReg_gate")
ggsave("./Figures/PBMC4A_Gating_09.pdf")

# Cluster 10 = TReg cells
# non.classified <- subset(PBMC.4A, idents = 14)
non.classified <- subset(PBMC.4A, idents = c(6, 9, 3, 4, 12, 8, 5, 13, 16, 7, 11), invert = T)
non.classified[["pDC_gate"]] <- rep("Other CD4+", nrow(non.classified[[]]))
TReg.cells <- WhichCells(non.classified, idents = 14)
non.classified@meta.data[TReg.cells, "pDC_gate"] <- "14"
non.classified@meta.data[, "pDC_gate"] <- factor(non.classified@meta.data[, "pDC_gate"],
                                                  levels = c("Other CD4+", "14"))

VlnPlot(non.classified, 'LILRA4', cols = colors.use[c(11, 15)],
        group.by = "pDC_gate")
ggsave("./Figures/PBMC4A_Gating_10.pdf")

FeaturePlot(PBMC.4A, "LILRA4", pt.size = 3)
# Cluster 14 = pDCs
rm(non.classified)

 
 # 6 = B Naive
 # 9 = B memory
 # 3, 4 = NK
 # 5 = NK_T
 # 12 = CD56Hi NK
 # 8 = classical monocytes 
 # 13 = non-classical monocytes
 # 16 = HSPCs
 # 0, 1, 2, 15 = CD4+ T-cell
 # 7, 11 = CD8+ T-cell
 # 10 = TRegs
 # 14 = DCs
Idents(PBMC.4A) <- PBMC.4A[["seurat_clusters"]]
Idents(PBMC.4A) <- plyr::mapvalues(Idents(PBMC.4A), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13, 14, 15,
                                                   16), 
                to = c('T_CD4', 'T_CD4', 'T_CD4', 'NK', 'NK', 'NK_T',
                       'B_Naive', 'T_CD8', 'Monocyte_Classical', 'B_Memory', 'TReg',
                       'T_CD8', 'NK_CD56Hi', 'Monocyte_NonClassical', 'Dendritic_Cells', 'T_CD4',
                       'HSPCs'))
UMAPPlot(PBMC.4A, cols = colors.use, pt.size = 2)
Idents(PBMC.4A) <- factor(Idents(PBMC.4A),
                                 levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs"))
PBMC.4A[["Cell_Type"]] <- Idents(PBMC.4A)
UMAPPlot(PBMC.4A, cols = colors.use, pt.size = 2, label = F) + 
     theme(legend.position = "none")
ggsave("./Figures/PBMC4A_Gating_11.pdf")

saveRDS(PBMC.4A, "./Data/PBMC.4A.rds")
saveRDS(PBMC.4A[["Cell_Type"]], "./Data/PBMC.4A.CellType.rds")
rm(PBMC.4A)
```


## PBMC 4-B
```{r}
# Read in filtered GEX matrix for PBMC 4-B (PBMC H1 Batch 2)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC3_46yoM_H1/Batch2/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.4B <- CreateSeuratObject(counts = mtx.list$`Gene Expression`)
rm(mtx.list)
# Read in dsb-corrected ADT matrix
dsb.mtx <- read.csv("./Data/PBMC4B_DSB.csv", row.names = 1, header = T)
# Sub DSB "XXX.1" cell IDs for Seurat "XXX-1" cell IDs
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.4B[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)
# Add mitochondrial percentage
PBMC.4B[["percent.mito"]] <- PercentageFeatureSet(PBMC.4B, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.4B[["percent.ribo"]] <- PercentageFeatureSet(PBMC.4B, pattern = "^RP(S|L)")
saveRDS(PBMC.4B, "./Data/Export/PBMCSample4.B.rds")
getwd()
# Run "standard" Seurat workflow
PBMC.4B <- PBMC.4B %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
#PBMC.4B.pca.test <- TestPCA(PBMC.4B, do.return = T)
# 16 PCs with z > 1
rm(PBMC.4B.pca.test)
PBMC.4B <- PBMC.4B %>% 
           RunUMAP(reduction = "pca", dims = 1:16) %>%
           FindNeighbors(reduction = "pca", dims = 1:16) %>%
           FindClusters(resolution = .8)

DimPlot(PBMC.4B, reduction = "umap", cols = colors.use, pt.size = 3)
PBMC.4B[["Transfer_IDs"]] <- readRDS("./Data/PBMC.4A.CellType.rds")
DimPlot(PBMC.4B, group.by = "Transfer_IDs", cols = colors.use, pt.size = 3)
DimPlot(PBMC.4B, group.by = "seurat_clusters", cols = colors.use, pt.size = 3)


 # 6 = B Naive
 # 11, 16 = B memory
 # 3, 4 = NK
 # 5 = NK_T
 # 12 = CD56Hi NK
 # 8 = classical monocytes 
 # 13 = non-classical monocytes
 # 18 = HSPCs
 # 0, 1, 2, 14 = CD4+ T-cell
 # 9 = TReg
 # 7, 10 = CD8+ T-cell
 # 15 = DCs
 # 17 = Cycling Cells

FeaturePlot(PBMC.4B, "MKI67", pt.size = 3)
Idents(PBMC.4B) <- PBMC.4B[["seurat_clusters"]]
Idents(PBMC.4B) <- plyr::mapvalues(Idents(PBMC.4B), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13, 14, 15,
                                                   16, 17, 18), 
                to = c('T_CD4', 'T_CD4', 'T_CD4', 'NK', 'NK', 'NK_T',
                       'B_Naive', 'T_CD8', 'Monocyte_Classical', 'TReg', 'T_CD8',
                       'B_Memory', 'NK_CD56Hi', 'Monocyte_NonClassical', 'T_CD4', 'Dendritic_Cells',
                       'B_Memory', 'Cycling_Cells', 'HSPCs'))

UMAPPlot(PBMC.4B, cols = colors.use, pt.size = 2)
Idents(PBMC.4B) <- factor(Idents(PBMC.4B),
                                 levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC.4B[["Cell_Type"]] <- Idents(PBMC.4B)
UMAPPlot(PBMC.4B, cols = colors.use, pt.size = 2)

saveRDS(PBMC.4B, "./Data/PBMC.4B.rds")
saveRDS(PBMC.4B[["Cell_Type"]], "./Data/PBMC.4B.CellType.rds")
rm(PBMC.4B)
```


## PBMC 5-A
```{r}
# Read in filtered GEX matrix for PBMC 5-A (PBMC F1 Batch 1)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC1_36yoF_F1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.5A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`)
rm(mtx.list)
# Read in dsb-corrected ADT matrix
dsb.mtx <- read.csv("./Data/PBMC5A_DSB.csv", row.names = 1, header = T)
# Sub DSB "XXX.1" cell IDs for Seurat "XXX-1" cell IDs
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.5A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)
# Add mitochondrial percentage
PBMC.5A[["percent.mito"]] <- PercentageFeatureSet(PBMC.5A, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.5A[["percent.ribo"]] <- PercentageFeatureSet(PBMC.5A, pattern = "^RP(S|L)")
saveRDS(PBMC.5A, "./Data/Export/PBMCSample5.A.rds")


# Run "standard" Seurat workflow
PBMC.5A <- PBMC.5A %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMC.5A.pca.test <- TestPCA(PBMC.5A)
# 15 PCs with z > 1
rm(PBMC.5A.pca.test)
PBMC.5A <- PBMC.5A %>% 
           RunUMAP(reduction = "pca", dims = 1:15) %>%
           FindNeighbors(reduction = "pca", dims = 1:15) %>%
           FindClusters(resolution = .8)

DimPlot(PBMC.5A, reduction = "umap", cols = colors.use)

d <- as.data.frame(FetchData(object = PBMC.5A, 
                   vars = c("CD20-TotalSeqC", "CD19-TotalSeqC", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("adt_CD20.TotalSeqC", "adt_CD19.TotalSeqC", "colors")
p <- FeatureScatter(PBMC.5A, "CD20-TotalSeqC", "CD19-TotalSeqC", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
    # scale_y_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) + 
    # scale_x_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) +
     guides(color = guide_legend(ncol=2)) + 
     labs(title = "PBMC Sample 5-A", 
          x = "CD20 (ADT)", 
          y = "CD19 (ADT)", 
          color = "Cluster") + theme_gray()
p
ggsave("./Figures/PBMC5A_Gating_01.svg")
# clusters 8, 9 = B cells

# Naive B cells
b.cells <- subset(PBMC.5A, `adt_CD20-TotalSeqC` > 25 | `adt_CD19-TotalSeqC` > 10)
b.cells[["IGD"]] <- colSums(b.cells@assays$RNA@data[grep("^IGHD", rownames(b.cells)), ])

VlnPlot(b.cells, "IGD")
FeaturePlot(b.cells, "IGD")

d <- as.data.frame(FetchData(object = b.cells, 
                   vars = c("IGD", "CD27-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("IGD", "adt_CD27.TotalSeqC", "colors")
p <- FeatureScatter(b.cells, "CD27-TotalSeqC", "IGD", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 5-A, B cells", 
          x = "CD27 (ADT)", 
          y = "Total IGHD Expression (RNA)", 
          color = "Cluster") + theme_gray()
p
ggsave("./Figures/PBMC5A_Gating_02.pdf", width = 7, height = 7)
# cluster 8 = naive B cells
rm(list = c('b.cells', 'p', 'd'))

non.classified <- subset(PBMC.5A, idents = c(8, 9), invert = T)
d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("CD56-TotalSeqC", "CD14-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("adt_CD56.TotalSeqC", "adt_CD14.TotalSeqC", "colors")
p <- FeatureScatter(non.classified, "CD14-TotalSeqC", "CD56-TotalSeqC", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 5-A, Non-classified", 
          x = "CD14 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
ggsave("./Figures/PBMC5A_Gating_03.svg")
# clusters 1, 3, 7 = NK cells

DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)

nk.cells <- subset(PBMC.5A, idents = c(1, 3, 7))
d <- as.data.frame(FetchData(object = nk.cells, 
                   vars = c("CD56-TotalSeqC", "CD3-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("adt_CD56.TotalSeqC", "adt_CD3.TotalSeqC", "colors")
p <- FeatureScatter(nk.cells, "CD3-TotalSeqC", "CD56-TotalSeqC", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 5-A, NK cells", 
          x = "CD3 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
FeaturePlot(PBMC.5A, "CD3G", pt.size = 3)
ggsave("./Figures/PBMC5A_Gating_04.svg")
# cluster 7 = NK cells, Clusters 1 & 3 = NK_T
rm(nk.cells)

non.classified <- subset(PBMC.5A, idents = c(8, 9, 1, 3, 7), invert = T)

DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("CD16-TotalSeqC", "CD14-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("adt_CD16.TotalSeqC", "adt_CD14.TotalSeqC", "colors")
p <- FeatureScatter(non.classified, "CD14-TotalSeqC", "CD16-TotalSeqC", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 5-A, non-classified cells", 
          x = "CD14 (ADT)", 
          y = "CD16 (ADT)", 
          color = "Cluster") + theme_gray()
p
DimPlot(PBMC.5A, reduction = "umap", cols = colors.use, pt.size = 3)

# Clusters 5, 11 = classical monocytes, 10 = non-classical monocytes

non.classified <- subset(PBMC.5A, idents = c(8, 9, 1, 3, 7, 5, 11, 10), invert = T)

VlnPlot(PBMC.5A, "CD34")
# No HSPC cluster detected (Included within Cluster 7 - NK Cells)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("CD8a-TotalSeqC", "CD4-TotalSeqC", "seurat_clusters")))
colnames(d) <- c("adt_CD8a.TotalSeqC", "adt_CD4.TotalSeqC", "colors")
p <- FeatureScatter(non.classified, "CD8a-TotalSeqC", "CD4-TotalSeqC", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 5-A, non-classified cells", 
          x = "CD8a (ADT)", 
          y = "CD4 (ADT)", 
          color = "Cluster") + theme_gray()
p
rm(d)
rm(p)
# 0, 2, 4, 13 = CD4+ T-cell; 6 = CD8+ T-cell
FeaturePlot(non.classified, "CD4-TotalSeqC", pt.size = 3)
UMAPPlot(PBMC.5A, cols = colors.use, pt.size = 3)

VlnPlot(PBMC.5A, "FOXP3")
FeaturePlot(PBMC.5A, "FOXP3")
# No TReg Cluster - contained within Cluster 4 (CD4-T)


VlnPlot(PBMC.5A, 'LILRA4')
FeaturePlot(PBMC.5A, "LILRA4", pt.size = 3)
# Cluster 12 = pDCs
rm(non.classified)
FeaturePlot(PBMC.5A, "CD56-TotalSeqC", pt.size = 3, min.cutoff = 5, max.cutoff = 6)

m <- FindMarkers(PBMC.5A, 13, only.pos = T)
m
 
 # 8 = B Naive
 # 9 = B memory
 # 7 = NK
 # 1, 3 = NK_T
 # 5, 11 = classical monocytes 
 # 10 = non-classical monocytes
 # 0, 2, 4, 13 = CD4+ T-cell
 # 6 = CD8+ T-cell
 # 12 = DCs
Idents(PBMC.5A) <- PBMC.5A[["seurat_clusters"]]
Idents(PBMC.5A) <- plyr::mapvalues(Idents(PBMC.5A), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13), 
                to = c('T_CD4', 'NK_T', 'T_CD4', 'NK_T', 'T_CD4', 'Monocyte_Classical',
                       'T_CD8', 'NK', 'B_Naive', 'B_Memory', 'Monocyte_NonClassical',
                       'Monocyte_Classical', 'Dendritic_Cells', 'T_CD4'))
UMAPPlot(PBMC.5A, cols = colors.use, pt.size = 2)
Idents(PBMC.5A) <- factor(Idents(PBMC.5A),
                                 levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs"))
PBMC.5A[["Cell_Type"]] <- Idents(PBMC.5A)
UMAPPlot(PBMC.5A, cols = colors.use, pt.size = 2)

saveRDS(PBMC.5A, "./Data/PBMC.5A.rds")
saveRDS(PBMC.5A[["Cell_Type"]], "./Data/PBMC.5A.CellType.rds")
rm(list = c('PBMC.5A','m', 'd', 'p', 'non.classified'))
```

## PBMC 5-B
```{r}
# Read in filtered GEX matrix for PBMC 5-B (PBMC F1 Batch 2)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC1_36yoF_F1/Batch2/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.5B <- CreateSeuratObject(counts = mtx.list$`Gene Expression`)
rm(mtx.list)
# Read in dsb-corrected ADT matrix
dsb.mtx <- read.csv("./Data/PBMC5B_DSB.csv", row.names = 1, header = T)
# Sub DSB "XXX.1" cell IDs for Seurat "XXX-1" cell IDs
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.5B[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)
# Add mitochondrial percentage
PBMC.5B[["percent.mito"]] <- PercentageFeatureSet(PBMC.5B, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.5B[["percent.ribo"]] <- PercentageFeatureSet(PBMC.5B, pattern = "^RP(S|L)")
saveRDS(PBMC.5B, "./Data/Export/PBMCSample5.B.rds")

# Run "standard" Seurat workflow
PBMC.5B <- PBMC.5B %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMC.5B.pca.test <- TestPCA(PBMC.5B)
PBMC.5B.pca.test[, 1:20]
# 14 PCs with z > 1
rm(PBMC.5B.pca.test)
PBMC.5B <- PBMC.5B %>% 
           RunUMAP(reduction = "pca", dims = 1:14) %>%
           FindNeighbors(reduction = "pca", dims = 1:14) %>%
           FindClusters(resolution = .8)

DimPlot(PBMC.5B, reduction = "umap", cols = colors.use, pt.size = 3)
PBMC.5B[["Transfer_IDs"]] <- readRDS("./Data/PBMC.5A.CellType.rds")
DimPlot(PBMC.5B, group.by = "Transfer_IDs", cols = colors.use, pt.size = 3)
DimPlot(PBMC.5B, group.by = "seurat_clusters", cols = colors.use, pt.size = 3)
FeaturePlot(PBMC.5B, "FOXP3", pt.size = 3)

 # 9 = B Naive
 # 11 = B memory
 # 8 = NK
 # 0, 1 = NK_T
 # 6, 14 = classical monocytes 
 # 12 = non-classical monocytes
 # 15 = HSPCs
 # 2, 3, 4, 5, 13 = CD4+ T-cell
 # 7 = CD8+ T-cell
 # 16 = DCs
 # 10 = Erythrocytes


Idents(PBMC.5B) <- PBMC.5B[["seurat_clusters"]]
Idents(PBMC.5B) <- plyr::mapvalues(Idents(PBMC.5B), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13, 14, 15,
                                                   16), 
                to = c('NK_T', 'NK_T', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'Monocyte_Classical', 'T_CD8', 'NK', 'B_Naive', 'Erythrocytes',
                       'B_Memory', 'Monocyte_NonClassical', 'T_CD4', 'Monocyte_Classical', 'HSPCs',
                       'Dendritic_Cells'))

UMAPPlot(PBMC.5B, cols = colors.use, pt.size = 2)
Idents(PBMC.5B) <- factor(Idents(PBMC.5B),
                                 levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells",
                                            "Erythrocytes"))
PBMC.5B[["Cell_Type"]] <- Idents(PBMC.5B)
UMAPPlot(PBMC.5B, cols = colors.use, pt.size = 2)

saveRDS(PBMC.5B, "./Data/PBMC.5B.rds")
saveRDS(PBMC.5B[["Cell_Type"]], "./Data/PBMC.5B.CellType.rds")
rm(PBMC.5B)
```
## PBMC 1
```{r}
# Read in filtered GEX & ADT matrices for PBMC 1 (Old PBMC_5, EG_3exp_lib_i7-A6)
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
# Create Seurat object from matrix
PBMC.1 <- CreateSeuratObject(counts = gex)
rm(gex)
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)
# Add mitochondrial percentage
PBMC.1[["percent.mito"]] <- PercentageFeatureSet(PBMC.1, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.1[["percent.ribo"]] <- PercentageFeatureSet(PBMC.1, pattern = "^RP(S|L)")
saveRDS(PBMC.1, "./Data/Export/PBMCSample1.rds")


# Run "standard" Seurat workflow
PBMC.1 <- PBMC.1 %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>% 
           NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
#PBMC.1.pca.test <- TestPCA(PBMC.1)
#PBMC.1.pca.test[, 1:20]
# 15 PCs with z > 1
#rm(PBMC.1.pca.test)
PBMC.1 <- PBMC.1 %>% 
           RunUMAP(reduction = "pca", dims = 1:15) %>%
           FindNeighbors(reduction = "pca", dims = 1:15) %>%
           FindClusters(resolution = .8)

DimPlot(PBMC.1, reduction = "umap", cols = colors.use, pt.size = 3)

d <- as.data.frame(FetchData(object = PBMC.1, 
                   vars = c("adt_CD20", "adt_CD19", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("adt_CD20", "adt_CD19", "colors")
p <- FeatureScatter(PBMC.1, "adt_CD20", "adt_CD19", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
    # scale_y_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) + 
    # scale_x_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) +
     guides(color = guide_legend(ncol=2)) + 
     labs(title = "PBMC Sample 1", 
          x = "CD20 (ADT)", 
          y = "CD19 (ADT)", 
          color = "Cluster") + theme_gray()
p
ggsave("./Figures/PBMC1_Gating_01.svg")
# cluster 8 = B cells

non.classified <- subset(PBMC.1, idents = 8, invert = T)
d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD56", "adt_CD14", "seurat_clusters")))
colnames(d) <- c("adt_CD56", "adt_CD14", "colors")
p <- FeatureScatter(non.classified, "adt_CD14", "adt_CD56", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 1, non-classified", 
          x = "CD14 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
# clusters 1, 6, 11 = NK cells

DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)

nk.cells <- subset(PBMC.1, idents = c(1, 6, 11))
d <- as.data.frame(FetchData(object = nk.cells, 
                   vars = c("adt_CD56", "adt_CD3", "seurat_clusters")))
colnames(d) <- c("adt_CD56", "adt_CD3", "colors")
p <- FeatureScatter(nk.cells, "adt_CD3", "adt_CD56", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 1, NK cells", 
          x = "CD3 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
ggsave("./Figures/PBMC4A_Gating_04.svg")
# cluster 11 = CD56Hi NK cells, Clusters 1 = NK Cells, 6 = NKT
rm(nk.cells)

FeaturePlot(PBMC.1, "adt_CD8", pt.size = 4, min.cutoff = 1)

non.classified <- subset(PBMC.1, idents = c(8, 1, 6, 11), invert = T)

DimPlot(non.classified, reduction = "umap", cols = colors.use)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD16", "adt_CD14", "seurat_clusters")))
colnames(d) <- c("adt_CD16", "adt_CD14", "colors")
p <- FeatureScatter(non.classified, "adt_CD14", "adt_CD16", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 1, non-classified cells", 
          x = "CD14 (ADT)", 
          y = "CD16 (ADT)", 
          color = "Cluster") + theme_gray()
p
DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)

# Cluster 9 = non-classical monocytes, 2, 7, 12 = classical monocytes

non.classified <- subset(PBMC.1, idents = c(8, 1, 6, 11, 9, 2, 7, 12), invert = T)

VlnPlot(non.classified, "CD34")
# Cluster 17 = HSPCs

non.classified <- subset(PBMC.1, idents = c(8, 1, 6, 11, 9, 2, 7, 12, 17), invert = T)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD8", "adt_CD4", "seurat_clusters")))
colnames(d) <- c("adt_CD8", "adt_CD4", "colors")
p <- FeatureScatter(non.classified, "adt_CD8", "adt_CD4", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 4-A, non-classified cells", 
          x = "CD8a (ADT)", 
          y = "CD4 (ADT)", 
          color = "Cluster") + theme_gray()
p

# 3, 4, 13 = CD4+ T-cell; 0, 5 = CD8+ T-cell
FeaturePlot(non.classified, "adt_CD4", pt.size = 3)
UMAPPlot(non.classified, cols = colors.use, pt.size = 3)

FeaturePlot(PBMC.1, "FOXP3")
# Cluster 10 = TReg cells
non.classified <- subset(PBMC.1, idents = c(0:13, 17), invert = T)


VlnPlot(PBMC.1, 'LILRA4')
FeaturePlot(PBMC.1, "LILRA4", pt.size = 3)
# Cluster 14 = pDCs
FeaturePlot(PBMC.1, "CD1C", pt.size = 3)
# Cluster 15 = mDCs

non.classified <- subset(PBMC.1, idents = c(0:15, 17), invert = T)
FeaturePlot(PBMC.1, "MKI67", pt.size = 3)
# Cluster 16 = Cycling Cells
UMAPPlot(PBMC.1, cols = colors.use, pt.size = 3)
rm(non.classified)
 
 # 8 = B_Cells
 # 1 = NK
 # 6 = NK_T
 # 11 = CD56Hi NK
 # 2, 7, 12 = classical monocytes 
 # 9 = non-classical monocytes
 # 17 = HSPCs
 # 3, 4, 13 = CD4+ T-cell
 # 0, 5 = CD8+ T-cell
 # 10 = TRegs
 # 14, 15 = DCs
 # 16 = Cycling Cells
Idents(PBMC.1) <- PBMC.1[["seurat_clusters"]]
Idents(PBMC.1) <- plyr::mapvalues(Idents(PBMC.1), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13, 14, 
                                                   15, 16, 17), 
                to = c('T_CD8', 'NK', 'Monocyte_Classical', 'T_CD4', 'T_CD4', 'T_CD8',
                       'NK_T', 'Monocyte_Classical', 'B_Cells', 'Monocyte_NonClassical', 'TReg',
                       'NK_CD56Hi', 'Monocyte_Classical', 'T_CD4', 'Dendritic_Cells', 
                       'Dendritic_Cells', "Cycling_Cells", 'HSPCs'))
UMAPPlot(PBMC.1, cols = colors.use, pt.size = 2)
Idents(PBMC.1) <- factor(Idents(PBMC.1),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC.1[["Cell_Type"]] <- Idents(PBMC.1)
UMAPPlot(PBMC.1, cols = colors.use, pt.size = 2)

saveRDS(PBMC.1, "./Data/PBMC.1.rds")
saveRDS(PBMC.1[["Cell_Type"]], "./Data/PBMC.1.CellType.rds")
rm(PBMC.1)
```

## PBMC 2
```{r}
# Read in filtered GEX & ADT matrices for PBMC 2 (Old PBMC_6, PBMC_Blood_AFD_3exp_lib_i7-B6)
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)

rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
# Create Seurat object from matrix
PBMC.2 <- CreateSeuratObject(counts = gex)
rm(gex)
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)
# Add mitochondrial percentage
PBMC.2[["percent.mito"]] <- PercentageFeatureSet(PBMC.2, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.2[["percent.ribo"]] <- PercentageFeatureSet(PBMC.2, pattern = "^RP(S|L)")
saveRDS(PBMC.2, "./Data/Export/PBMCSample2.rds")


# Run "standard" Seurat workflow
PBMC.2 <- PBMC.2 %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>% 
           NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMC.2.pca.test <- TestPCA(PBMC.2)
PBMC.2.pca.test[, 1:20]
# 12 PCs with z > 1
rm(PBMC.2.pca.test)
PBMC.2 <- PBMC.2 %>% 
           RunUMAP(reduction = "pca", dims = 1:12) %>%
           FindNeighbors(reduction = "pca", dims = 1:12) %>%
           FindClusters(resolution = .8)

DimPlot(PBMC.2, reduction = "umap", cols = colors.use, pt.size = 3)

d <- as.data.frame(FetchData(object = PBMC.2, 
                   vars = c("adt_CD20", "adt_CD19", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("adt_CD20", "adt_CD19", "colors")
p <- FeatureScatter(PBMC.2, "adt_CD20", "adt_CD19", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
    # scale_y_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) + 
    # scale_x_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) +
     guides(color = guide_legend(ncol=2)) + 
     labs(title = "PBMC Sample 2", 
          x = "CD20 (ADT)", 
          y = "CD19 (ADT)", 
          color = "Cluster") + theme_gray()
p
# clusters 9, 12 = B cells

non.classified <- subset(PBMC.2, idents = c(9, 12), invert = T)
d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD56", "adt_CD14", "seurat_clusters")))
colnames(d) <- c("adt_CD56", "adt_CD14", "colors")
p <- FeatureScatter(non.classified, "adt_CD14", "adt_CD56", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 2, non-classified", 
          x = "CD14 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
# clusters 1, 6, 14 = NK cells

DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)
FeaturePlot(non.classified, "adt_CD8", pt.size = 3)

nk.cells <- subset(PBMC.2, idents = c(1, 6, 14))
d <- as.data.frame(FetchData(object = nk.cells, 
                   vars = c("adt_CD56", "adt_CD3", "seurat_clusters")))
colnames(d) <- c("adt_CD56", "adt_CD3", "colors")
p <- FeatureScatter(nk.cells, "adt_CD3", "adt_CD56", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 1, NK cells", 
          x = "CD3 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
ggsave("./Figures/PBMC4A_Gating_04.svg")
# cluster 14 = CD56Hi NK cells, Clusters 1 = NK Cells, 6 = NKT
rm(nk.cells)

non.classified <- subset(PBMC.2, idents = c(9, 12, 1, 6, 14), invert = T)

DimPlot(non.classified, reduction = "umap", cols = colors.use)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD16", "adt_CD14", "seurat_clusters")))
colnames(d) <- c("adt_CD16", "adt_CD14", "colors")
p <- FeatureScatter(non.classified, "adt_CD14", "adt_CD16", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 2, non-classified cells", 
          x = "CD14 (ADT)", 
          y = "CD16 (ADT)", 
          color = "Cluster") + theme_gray()
p
DimPlot(PBMC.2, reduction = "umap", cols = colors.use, pt.size = 3)

# Cluster 8 = non-classical monocytes, 2, 4, 10 = classical monocytes

non.classified <- subset(PBMC.2, idents = c(9, 12, 1, 6, 14, 2, 4, 10, 8), invert = T)

VlnPlot(PBMC.2, "CD34")
# No HSPC cluster detected (included in cluster 14)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD8", "adt_CD4", "seurat_clusters")))
colnames(d) <- c("adt_CD8", "adt_CD4", "colors")
p <- FeatureScatter(non.classified, "adt_CD8", "adt_CD4", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 2, non-classified cells", 
          x = "CD8a (ADT)", 
          y = "CD4 (ADT)", 
          color = "Cluster") + theme_gray()
p

# 0, 3 = CD4+ T-cell; 5, 7 = CD8+ T-cell
FeaturePlot(non.classified, "adt_CD8", pt.size = 3)
UMAPPlot(PBMC.2, cols = colors.use, pt.size = 3)

FeaturePlot(PBMC.2, "FOXP3")
# No TReg cluster - within cluster 3


VlnPlot(PBMC.2, 'LILRA4')
FeaturePlot(PBMC.2, "LILRA4", pt.size = 3)
# Cluster 13 = pDCs
FeaturePlot(PBMC.2, "CD1C", pt.size = 3)
# Cluster 11 = mDCs

rm(non.classified)
 
 # 9, 12 = B_Cells
 # 1 = NK
 # 6 = NK_T
 # 14 = CD56Hi NK
 # 2, 4, 10 = classical monocytes 
 # 8 = non-classical monocytes
 # 0, 3 = CD4+ T-cell
 # 5, 7 = CD8+ T-cell
 # 13, 11 = DCs
Idents(PBMC.2) <- PBMC.2[["seurat_clusters"]]
Idents(PBMC.2) <- plyr::mapvalues(Idents(PBMC.2), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13, 14), 
                to = c('T_CD4', 'NK', 'Monocyte_Classical', 'T_CD4', 'Monocyte_Classical', 'T_CD8',
                       'NK_T', 'T_CD8', 'Monocyte_NonClassical', 'B_Cells', 'Monocyte_Classical',
                       'Dendritic_Cells', 'B_Cells', 'Dendritic_Cells', 'NK_CD56Hi'))
UMAPPlot(PBMC.2, cols = colors.use, pt.size = 2)
Idents(PBMC.2) <- factor(Idents(PBMC.2),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC.2[["Cell_Type"]] <- Idents(PBMC.2)
UMAPPlot(PBMC.2, cols = colors.use, pt.size = 2)

PBMC.2 <- readRDS("./Data/PBMC.2.rds")
saveRDS(PBMC.2[["Cell_Type"]], "./Data/PBMC.2.CellType.rds")
rm(list = c('PBMC.2', 'd', 'p'))
```

## PBMC 3
```{r}

# Read in filtered GEX & ADT matrices for PBMC 3 (Old PBMC_7, PBMC_Blood_AK_3exp_lib_i7-C6)
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)

rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
# Create Seurat object from matrix
PBMC.3 <- CreateSeuratObject(counts = gex)
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)
# Add mitochondrial percentage
PBMC.3[["percent.mito"]] <- PercentageFeatureSet(PBMC.3, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC.3[["percent.ribo"]] <- PercentageFeatureSet(PBMC.3, pattern = "^RP(S|L)")
saveRDS(PBMC.3, "./Data/Export/PBMCSample3.rds")


# Run "standard" Seurat workflow
PBMC.3 <- PBMC.3 %>% 
           MitoFilter() %>% 
           NormalizeData(verbose = FALSE, assay = "RNA") %>% 
           NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
           FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
           ScaleData() %>% 
           RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMC.3.pca.test <- TestPCA(PBMC.3)
PBMC.3.pca.test[, 1:20]
# 13 PCs with z > 1
rm(PBMC.3.pca.test)
PBMC.3 <- PBMC.3 %>% 
           RunUMAP(reduction = "pca", dims = 1:13) %>%
           FindNeighbors(reduction = "pca", dims = 1:13) %>%
           FindClusters(resolution = .8)

DimPlot(PBMC.3, reduction = "umap", cols = colors.use, pt.size = 3)

d <- as.data.frame(FetchData(object = PBMC.3, 
                   vars = c("adt_CD20", "adt_CD19", "seurat_clusters")))
## Format colnames to match FeatureScatter syntax
colnames(d) <- c("adt_CD20", "adt_CD19", "colors")
p <- FeatureScatter(PBMC.3, "adt_CD20", "adt_CD19", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
    # scale_y_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) + 
    # scale_x_flowjo_biexp(maxValue = 262144, widthBasis = -10, pos = 4.5, neg = 0, equal.space = F) +
     guides(color = guide_legend(ncol=2)) + 
     labs(title = "PBMC Sample 3", 
          x = "CD20 (ADT)", 
          y = "CD19 (ADT)", 
          color = "Cluster") + theme_gray()
p
# clusters 11, 13 = B cells

non.classified <- subset(PBMC.3, idents = c(11, 13), invert = T)
d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD56", "adt_CD14", "seurat_clusters")))
colnames(d) <- c("adt_CD56", "adt_CD14", "colors")
p <- FeatureScatter(non.classified, "adt_CD14", "adt_CD56", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 2, non-classified", 
          x = "CD14 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
# clusters 1, 6, 10 = NK cells

DimPlot(non.classified, reduction = "umap", cols = colors.use, pt.size = 3)
FeaturePlot(non.classified, "adt_CD8", pt.size = 3)

nk.cells <- subset(PBMC.3, idents = c(1, 6, 10))
d <- as.data.frame(FetchData(object = nk.cells, 
                   vars = c("adt_CD56", "adt_CD3", "seurat_clusters")))
colnames(d) <- c("adt_CD56", "adt_CD3", "colors")
p <- FeatureScatter(nk.cells, "adt_CD3", "adt_CD56", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 1, NK cells", 
          x = "CD3 (ADT)", 
          y = "CD56 (ADT)", 
          color = "Cluster") + theme_gray()
p
# cluster 10 = CD56Hi NK cells, Cluster 6 = NK Cells, 1 = NKT
rm(nk.cells)

non.classified <- subset(PBMC.3, idents = c(11, 13, 1, 6, 10), invert = T)

DimPlot(non.classified, reduction = "umap", cols = colors.use)

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD16", "adt_CD14", "seurat_clusters")))
colnames(d) <- c("adt_CD16", "adt_CD14", "colors")
p <- FeatureScatter(non.classified, "adt_CD14", "adt_CD16", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 2, non-classified cells", 
          x = "CD14 (ADT)", 
          y = "CD16 (ADT)", 
          color = "Cluster") + theme_gray()
p
DimPlot(PBMC.3, reduction = "umap", cols = colors.use, pt.size = 3)

# Cluster 12 = non-classical monocytes, 3, 7 = classical monocytes

non.classified <- subset(PBMC.3, idents = c(11, 13, 1, 6, 10, 3, 7, 12), invert = T)

VlnPlot(PBMC.3, "CD34")
# No HSPC cluster detected

d <- as.data.frame(FetchData(object = non.classified, 
                   vars = c("adt_CD8", "adt_CD4", "seurat_clusters")))
colnames(d) <- c("adt_CD8", "adt_CD4", "colors")
p <- FeatureScatter(non.classified, "adt_CD8", "adt_CD4", 
                    cols = colors.use, pt.size = 3) +
     geom_density2d(data = d, color = "black", size = 1) +
     labs(title = "PBMC Sample 2, non-classified cells", 
          x = "CD8a (ADT)", 
          y = "CD4 (ADT)", 
          color = "Cluster") + theme_gray()
p

# 0, 2, 4, 14, 15 = CD4+ T-cell; 5, 8, 9 = CD8+ T-cell
FeaturePlot(non.classified, "adt_CD4", pt.size = 3)
UMAPPlot(PBMC.3, cols = colors.use, pt.size = 3)

FeaturePlot(PBMC.3, "FOXP3")
# No TReg cluster - within cluster 2


VlnPlot(PBMC.3, 'LILRA4')
FeaturePlot(PBMC.3, "LILRA4", pt.size = 3)
# No pDC cluster: contained within cluster 13 B-cells
FeaturePlot(PBMC.3, "CD1C", pt.size = 3)
# Cluster 16 = mDCs

rm(non.classified)
 
 # 11, 13 = B_Cells
 # 6 = NK
 # 1 = NK_T
 # 10 = CD56Hi NK
 # 3, 7 = classical monocytes 
 # 12 = non-classical monocytes
 # 0, 2, 4, 14, 15 = CD4+ T-cell
 # 5, 8, 9 = CD8+ T-cell
 # 16 = DCs
Idents(PBMC.3) <- PBMC.3[["seurat_clusters"]]
Idents(PBMC.3) <- plyr::mapvalues(Idents(PBMC.3), from = c(0, 1, 2, 3, 4, 5,
                                                   6, 7, 8, 9, 10,
                                                   11, 12, 13, 14, 15,
                                                   16), 
                to = c('T_CD4', 'NK_T', 'T_CD4', 'Monocyte_Classical', 'T_CD4', 'T_CD8',
                       'NK', 'Monocyte_Classical', 'T_CD8', 'T_CD8', 'NK_CD56Hi',
                       'B_Cells', 'Monocyte_NonClassical', 'B_Cells', 'T_CD4', "T_CD4",
                       "Dendritic_Cells"))
Idents(PBMC.3) <- factor(Idents(PBMC.3),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC.3[["Cell_Type"]] <- Idents(PBMC.3)
UMAPPlot(PBMC.3, cols = colors.use, pt.size = 2)

saveRDS(PBMC.3, "./Data/PBMC.3.rds")
saveRDS(PBMC.3[["Cell_Type"]], "./Data/PBMC.3.CellType.rds")
PBMC <- readRDS("./Data/PBMC.5A.rds")
rm(list = c('PBMC.3', 'd', 'p'))
```

# Sample Donor
## PBMC 1-3: Default Workflow
```{r}
# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("Sample_01", "Sample_02", "Sample_03"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")

# Run "standard" Seurat workflow: "https://satijalab.org/seurat/articles/pbmc3k_tutorial.html"
PBMCs <- PBMCs %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData() %>% 
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
#PBMCs.pca.test <- TestPCA(PBMCs)
#PBMCs.pca.test[, 1:20]
# 14 PCs with z > 1
#rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:14) %>%
         FindNeighbors(reduction = "pca", dims = 1:14) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("Default Workflow")
ggsave("./Figures/Figure2A.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Cells = 14, 16
# T_CD4 = 0, 1, 3, 21, 19
# No TReg cluster (contained within clusters 1 & 3)
# T_CD8 = 4, 7, 11
# NK_T = 5, 8
# NK = 6, 10
# NKCD56Hi = 15
# Monocyte_Classical = 2, 9, 12, 17
# Monocyte_NonClassical = 13
# Dendritic_Cells = 18
# HSPCs = 20
# Cycling_Cells = 22
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(14, 16, 0, 1, 3, 21, 19,
                                                         4, 7, 11, 5, 8, 6, 10,
                                                         15, 2, 9, 12, 
                                                         17, 13, 18,
                                                         20, 22), 
                to = c('B_Cells', 'B_Cells', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4', "T_CD4",
                       'T_CD8', 'T_CD8', 'T_CD8', 'NK_T', 'NK_T', "NK", "NK",
                       'NK_CD56Hi', 'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_Classical',
                       'Monocyte_Classical', 'Monocyte_NonClassical', 'Dendritic_Cells',
                       'HSPCs', 'Cycling_Cells'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("Cell Type Classifications")
ggsave("./Figures/Figure2A_PBMCs.CellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_LogScale_Together.rds")
PBMCs <- readRDS("./Data/PBMCs_LogScale_Together.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_LogScale_Together.CellType.rds")


# Test whether each sample has a different read depth (nUMI) than the other two
PBMC.1.umi <- PBMCs@meta.data[which(PBMCs@meta.data$orig.ident %in% c("Sample_01")), "nCount_RNA"]
other.umi <- PBMCs@meta.data[which(!PBMCs@meta.data$orig.ident %in% c("Sample_01")), "nCount_RNA"]
wilcox.test(PBMC.1.umi, other.umi)
rm(list = c('PBMC.1.umi', 'other.umi'))

PBMC.2.umi <- PBMCs@meta.data[which(PBMCs@meta.data$orig.ident %in% c("Sample_02")), "nCount_RNA"]
other.umi <- PBMCs@meta.data[which(!PBMCs@meta.data$orig.ident %in% c("Sample_02")), "nCount_RNA"]
wilcox.test(PBMC.2.umi, other.umi)
rm(list = c('PBMC.2.umi', 'other.umi'))

PBMC.3.umi <- PBMCs@meta.data[which(PBMCs@meta.data$orig.ident %in% c("Sample_03")), "nCount_RNA"]
other.umi <- PBMCs@meta.data[which(!PBMCs@meta.data$orig.ident %in% c("Sample_03")), "nCount_RNA"]
wilcox.test(PBMC.3.umi, other.umi)
rm(list = c('PBMC.3.umi', 'other.umi'))

```

## PBMC 1-3: CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_LogScale_Together.rds")

# Compute the LISI scores
## We want to know the LISI for orig.ident - aka the sample ID

coords <- PBMCs@reductions$umap@cell.embeddings
sample_cats <- data.frame("orig.ident" = PBMCs@meta.data$orig.ident,
                          "seurat_clusters" = PBMCs@meta.data$Cell_Type)
res <- compute_lisi(coords, sample_cats, c('orig.ident', 'seurat_clusters'))
sample.lisi <- median(res$orig.ident)
min.lisi <- median(res$seurat_clusters)
# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal
adjusted.lisi <- (sample.lisi - min.lisi) / (3 - min.lisi)
adjusted.lisi
# 0.1387811 (0.8612189t)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8486819
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_01.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))




# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.907393
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_02.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))




# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9495646
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_03.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))
# Average CMS = 0.9018797
PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_Sample_Pooled.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
```

# Library Sequencing
## PBMC 4: Default Workflow
```{r}
# Read PBMC 4-A
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC3_46yoM_H1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.4A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_4A")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC4A_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.4A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)
# Read PBMC 4-B
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC3_46yoM_H1/Batch2/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.4B <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_4B")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC4B_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.4B[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)

# Merge PBMC 4 replicates
PBMC4 <- merge(PBMC.4A, y = PBMC.4B, add.cell.ids = c("S4A", "S4B"))
rm(list = c("PBMC.4A", "PBMC.4B"))
# Add mitochondrial percentage
PBMC4[["percent.mito"]] <- PercentageFeatureSet(PBMC4, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC4[["percent.ribo"]] <- PercentageFeatureSet(PBMC4, pattern = "^RP(S|L)")

# Run "standard" Seurat workflow: "https://satijalab.org/seurat/articles/pbmc3k_tutorial.html"
PBMC4 <- PBMC4 %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData() %>% 
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMC4.pca.test <- TestPCA(PBMC4)
PBMC4.pca.test[, 1:20]
# 16 PCs with z > 1
rm(PBMC4.pca.test)
PBMC4 <- PBMC4 %>% 
         RunUMAP(reduction = "pca", dims = 1:16) %>%
         FindNeighbors(reduction = "pca", dims = 1:16) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMC4, cols = colors.use, group.by = "orig.ident") + ggtitle("Default Workflow")
ggsave("./Figures/Figure2B_Replicate.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMC4) <- PBMC4[["orig.ident"]]
PBMC4[["Transfer_IDs"]] <- rep("NA", nrow(PBMC4[[]]))
# Transfer Sample 4-A labels
S4A.cells <- WhichCells(PBMC4, idents = "Sample_4A")
Transfer_IDs <- readRDS("./Data/PBMC.4A.CellType.rds")
rownames(Transfer_IDs) <- paste0("S4A_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S4A.cells, ]
PBMC4@meta.data[S4A.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample 4-B labels
S4B.cells <- WhichCells(PBMC4, idents = "Sample_4B")
Transfer_IDs <- readRDS("./Data/PBMC.4B.CellType.rds")
rownames(Transfer_IDs) <- paste0("S4B_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S4B.cells, ]
PBMC4@meta.data[S4B.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S4A.cells', 'S4B.cells'))
Idents(PBMC4) <- PBMC4[['Transfer_IDs']]
# Format factor order
Idents(PBMC4) <- factor(Idents(PBMC4),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg",
                                   "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                   "Monocyte_Classical", "Monocyte_NonClassical",
                                   "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC4[['Transfer_IDs']] <-Idents(PBMC4)

UMAPPlot(PBMC4, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMC4, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Naive = 7
# B_Memory = 12, 18
# T_CD4 = 0, 1, 4, 6, 16
# TReg = 11
# T_CD8 = 8, 13
# NK_T = 5, 15
# NK = 2, 3
# NK_CD56Hi = 9
# Monocyte_Classical = 10
# Monocyte_NonClassical = 14
# Dendritic_Cells = 17
# HSPCs = 20
# Cycling_Cells = 19
Idents(PBMC4) <- PBMC4[["seurat_clusters"]]
Idents(PBMC4) <- plyr::mapvalues(Idents(PBMC4), from = c(7, 12, 18, 0, 1, 4, 6, 16,
                                                         11, 8, 13, 5, 15, 2, 3, 9,
                                                         10, 14, 17,
                                                         20, 19), 
                to = c('B_Naive', 'B_Memory', 'B_Memory', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'TReg', 'T_CD8', 'T_CD8', 'NK_T', 'NK_T', 'NK', 'NK', 'NK_CD56Hi',
                       'Monocyte_Classical', 'Monocyte_NonClassical', 'Dendritic_Cells',
                       'HSPCs', 'Cycling_Cells'))
Idents(PBMC4) <- factor(Idents(PBMC4),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg",
                                   "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                   "Monocyte_Classical", "Monocyte_NonClassical",
                                   "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC4[["Cell_Type"]] <- Idents(PBMC4)
UMAPPlot(PBMC4, cols = colors.use, label = F) + ggtitle("Cell Type Classifications")
ggsave("./Figures/Figure2B_PBMC4.CellTypes.pdf", width = 10, height = 7)
UMAPPlot(PBMC4, cols = colors.use, label = F)
ggsave("./Figures/PBMC4_Sample_Pooled_CellTypes.pdf", width = 10, height = 7)
saveRDS(PBMC4, "./Data/PBMC4_LogScale_Together.rds")
PBMC4 <- readRDS("./Data/PBMC4_LogScale_Together.rds")
saveRDS(PBMC4[["Cell_Type"]], "./Data/PBMC4_LogScale_Together.CellType.rds")

# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMC4@meta.data[which(PBMC4[["orig.ident"]] == "Sample_4A"), "Cell_Type"])/
               sum(PBMC4[["orig.ident"]] == "Sample_4A"),
      table(PBMC4@meta.data[which(PBMC4[["orig.ident"]] == "Sample_4B"), "Cell_Type"])/
               sum(PBMC4[["orig.ident"]] == "Sample_4B"))
chisq.test(tab)
write.csv(tab, file = "./Figures/Supplementary_Table_CellTypeID_S4.csv")

# Chi-square test for cluster homogeneity
tab <- rbind(table(PBMC4@meta.data[which(PBMC4[["orig.ident"]] == "Sample_4A"), "seurat_clusters"])/
               sum(PBMC4[["orig.ident"]] == "Sample_4A"),
      table(PBMC4@meta.data[which(PBMC4[["orig.ident"]] == "Sample_4B"), "seurat_clusters"])/
               sum(PBMC4[["orig.ident"]] == "Sample_4B"))
chisq.test(tab)
write.csv(tab, file = "./Figures/Supplementary_Table_ClusterID_S4.csv")
```

## PBMC 4: CMS Scoring
```{r}
# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

PBMC4 <- readRDS("./Data/PBMC4_LogScale_Together.rds")

GetiLISI(object = PBMC4, nSamples = 2)
# 0.9695882 (0.0304118)



# CMS Scoring by replicate
# Replicate Sample_4A
ref_ID <- readRDS("./Data/PBMC.4A.CellType.rds")

## Gather new cell type IDs as "test_ID"
Idents(PBMC4) <- PBMC4[["orig.ident"]]
S_4A <- subset(PBMC4, idents = "Sample_4A")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.4A.CellType.rds")
rownames(ref_ID) <- paste0("S4A_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_4A))
test_ID <- as.character(S_4A@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9637624
# plot reference types, transferred IDs & mismatches
S4A.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_4A, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S4A.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMC4_Sample_4A.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_4A"))


# Replicate Sample_4B

## Gather new cell type IDs as "test_ID"
Idents(PBMC4) <- PBMC4[["orig.ident"]]
S_4B <- subset(PBMC4, idents = "Sample_4B")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.4B.CellType.rds")
rownames(ref_ID) <- paste0("S4B_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_4B))
test_ID <- as.character(S_4B@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9720741
# plot reference types, transferred IDs & mismatches
S4B.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_4B, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S4B.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMC4_Sample_4B.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_4B"))

PBMC4.Mismatch.Cells <- c(S4A.Mismatch.Cells, S4B.Mismatch.Cells)
UMAPPlot(PBMC4, cols = c("grey", "red"), label = F, cells.highlight = PBMC4.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMC4_Sample_Pooled.mismatch.pdf")
rm(list = c('PBMC4.Mismatch.Cells', 'PBMC4', 'S4A.Mismatch.Cells', 'S4B.Mismatch.Cells'))
```
# Library Sequencing Depth
## PBMC 5: Default Workflow
```{r}
# Read PBMC 5-A
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC1_36yoF_F1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.5A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_5A")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC5A_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.5A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)
# Read PBMC 5-B
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC1_36yoF_F1/Batch2/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.5B <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_5B")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC5B_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.5B[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)

# Merge PBMC 4 replicates
PBMC5 <- merge(PBMC.5A, y = PBMC.5B, add.cell.ids = c("S5A", "S5B"))
rm(list = c("PBMC.5A", "PBMC.5B"))
# Add mitochondrial percentage
PBMC5[["percent.mito"]] <- PercentageFeatureSet(PBMC5, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMC5[["percent.ribo"]] <- PercentageFeatureSet(PBMC5, pattern = "^RP(S|L)")

# Run "standard" Seurat workflow: "https://satijalab.org/seurat/articles/pbmc3k_tutorial.html"
PBMC5 <- PBMC5 %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData() %>% 
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMC5.pca.test <- TestPCA(PBMC5)
PBMC5.pca.test[, 1:20]
# 14 PCs with z > 1
rm(PBMC5.pca.test)
PBMC5 <- PBMC5 %>% 
         RunUMAP(reduction = "pca", dims = 1:14) %>%
         FindNeighbors(reduction = "pca", dims = 1:14) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMC5, cols = colors.use, group.by = "orig.ident") + ggtitle("Default Workflow")
ggsave("./Figures/Figure2C_Replicate.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMC5) <- PBMC5[["orig.ident"]]
PBMC5[["Transfer_IDs"]] <- rep("NA", nrow(PBMC5[[]]))
# Transfer Sample 5-A labels
S5A.cells <- WhichCells(PBMC5, idents = "Sample_5A")
Transfer_IDs <- readRDS("./Data/PBMC.5A.CellType.rds")
rownames(Transfer_IDs) <- paste0("S5A_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S5A.cells, ]
PBMC5@meta.data[S5A.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample 5-B labels
S5B.cells <- WhichCells(PBMC5, idents = "Sample_5B")
Transfer_IDs <- readRDS("./Data/PBMC.5B.CellType.rds")
rownames(Transfer_IDs) <- paste0("S5B_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S5B.cells, ]
PBMC5@meta.data[S5B.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S5A.cells', 'S5B.cells'))
Idents(PBMC5) <- PBMC5[['Transfer_IDs']]
# Format factor order
Idents(PBMC5) <- factor(Idents(PBMC5),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells",
                                            "Erythrocytes"))
PBMC5[['Transfer_IDs']] <-Idents(PBMC5)

UMAPPlot(PBMC5, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMC5, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Naive = 11
# B_Memory = 12
# T_CD4 = 0, 1, 2, 3, 16
# TReg not detected
# T_CD8 = 6
# NK_T = 4, 7, 8, 10
# NK = 9
# NK_CD56Hi = 9
# Monocyte_Classical = 5, 15
# Monocyte_NonClassical = 14
# Dendritic_Cells = 17, 18
# HSPCs = 13 (erythrocytes)

Idents(PBMC5) <- PBMC5[["seurat_clusters"]]
Idents(PBMC5) <- plyr::mapvalues(Idents(PBMC5), from = c(11, 12, 0, 1, 2, 3, 16,
                                                         6, 4, 7, 8, 10, 9,
                                                         5, 15, 14,
                                                         17, 18, 13), 
                to = c('B_Naive', 'B_Memory', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'T_CD8', 'NK_T', 'NK_T', 'NK_T', 'NK_T', 'NK',
                       'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_NonClassical',
                       'Dendritic_Cells', 'Dendritic_Cells', 'HSPCs'))
Idents(PBMC5) <- factor(Idents(PBMC5),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg",
                                   "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                   "Monocyte_Classical", "Monocyte_NonClassical",
                                   "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMC5[["Cell_Type"]] <- Idents(PBMC5)
UMAPPlot(PBMC5, cols = colors.use, label = F) + ggtitle("Cell Type Classifications")
ggsave("./Figures/Figure2C_PBMC5.CellTypes.pdf", width = 10, height = 7)
UMAPPlot(PBMC5, cols = colors.use, label = F)
ggsave("./Figures/PBMC5_Sample_PooledCellTypes.pdf", width = 10, height = 7)
saveRDS(PBMC5, "./Data/PBMC5_LogScale_Together.rds")
PBMC5 <- readRDS("./Data/PBMC5_LogScale_Together.rds")
saveRDS(PBMC5[["Cell_Type"]], "./Data/PBMC5_LogScale_Together.CellType.rds")

# Chi-square test for Cell type homogeneity
tab <- rbind(table(PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5A"), "Cell_Type"])/
               sum(PBMC5[["orig.ident"]] == "Sample_5A"),
      table(PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5B"), "Cell_Type"])/
               sum(PBMC5[["orig.ident"]] == "Sample_5B"))
chisq.test(tab)
write.csv(tab, file = "./Figures/Supplementary_Table_CellTypeID_S5.csv")

# Chi-square test for cluster homogeneity
tab <- rbind(table(PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5A"), "seurat_clusters"])/
               sum(PBMC5[["orig.ident"]] == "Sample_5A"),
      table(PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5B"), "seurat_clusters"])/
               sum(PBMC5[["orig.ident"]] == "Sample_5B"))
chisq.test(tab)
write.csv(tab, file = "./Figures/Supplementary_Table_ClusterID_S5.csv")


# Drop Erythrocyte-containing cluster from table & re-test
Idents(PBMC5) <- PBMC5[["Cell_Type"]]
PBMC5 <- subset(PBMC5, idents = "HSPCs", invert = T)
tab <- rbind(table(PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5A"), "Cell_Type"])/
               sum(PBMC5[["orig.ident"]] == "Sample_5A"),
      table(PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5B"), "Cell_Type"])/
               sum(PBMC5[["orig.ident"]] == "Sample_5B"))
chisq.test(tab[, 1:9])
write.csv(tab[, 1:9], file = "./Figures/Supplementary_Table_CellTypeID_NoEryth_S5.csv")

chisq.test(tab[, 1:9])
rm(tab)
# Test whether erythrocytes have lower RNA UMIs than population background
eryth_grouping <- PBMC5@meta.data[which(PBMC5@meta.data$Cell_Type %in% c("HSPCs") & PBMC5@meta.data$orig.ident %in% c("Sample_5B")), "nCount_RNA"]
other <- PBMC5@meta.data[which(!PBMC5@meta.data$Cell_Type %in% c("HSPCs")), "nCount_RNA"]
#wilcox.test(eryth_grouping, other)
## Visualize erythrocyte UMI counts with a violin plot
eryth_cells <- rownames(PBMC5@meta.data)[which(PBMC5@meta.data$Cell_Type %in% c("HSPCs") & PBMC5@meta.data$orig.ident %in% c("Sample_5B"))]

PBMC5[["is.erythrocyte"]] <- rep("All other cells", nrow(PBMC5[[]]))
PBMC5@meta.data[eryth_cells, "is.erythrocyte"] <- "Erythrocytes"

PBMC5[["is.erythrocyte"]] <- factor(PBMC5@meta.data$is.erythrocyte,
                                    levels = c("Erythrocytes", "All other cells"))


VlnPlot(PBMC5, "nCount_RNA", group.by = "is.erythrocyte", cols = colors.use, pt.size = 0.5) +
  geom_boxplot(width=0.3, outlier.size = 0, inherit.aes = T)  + 
  coord_cartesian(ylim = c(0, 20000))
  

ggsave("./Figures/Fig.S5_Erythrocyte_RNA_nUMI_Vln.pdf", width = 7, height = 7)
rm(list = c('eryth_grouping', 'other'))

# Test whether replicate "B" contain more UMIs than "A"
S5A.umi <- PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5A"), "nCount_RNA"]
S5B.umi <- PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5B"), "nCount_RNA"]
VlnPlot(PBMC5, "nCount_RNA", group.by = "orig.ident", cols = colors.use, pt.size = 0.5) +
  geom_boxplot(width=0.3, outlier.size = 0, inherit.aes = T) + 
  coord_cartesian(ylim = c(0, 20000))
ggsave("./Figures/Fig.S5_Sample_RNA_nUMI_Vln.pdf", width = 7, height = 7)

wilcox.test(S5A.umi, S5B.umi)
rm(list = c('S5A.umi', 'S5B.umi'))
# Test whether replicate "B" contain more unique genes than "A"
S5A.genes <- PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5A"), "nFeature_RNA"]
S5B.genes <- PBMC5@meta.data[which(PBMC5[["orig.ident"]] == "Sample_5B"), "nFeature_RNA"]
VlnPlot(PBMC5, "nFeature_RNA", group.by = "orig.ident", cols = colors.use, pt.size = 0.5) +
  geom_boxplot(width=0.3, outlier.size = 0, inherit.aes = T)
ggsave("./Figures/Fig.S5_Sample_RNA_nGenes_Vln.pdf", width = 7, height = 7)

wilcox.test(S5A.genes, S5B.genes)
rm(list = c('S5A.genes', 'S5B.genes'))

```
## PBMC 5: CMS Scoring
```{r}
PBMC5 <- readRDS("./Data/PBMC5_LogScale_Together.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMC5, nSamples = 2)
# 0.9724359 (0.0275641)


# CMS Scoring by replicate
# Replicate Sample_5A

## Gather new cell type IDs as "test_ID"
Idents(PBMC5) <- PBMC5[["orig.ident"]]
S_5A <- subset(PBMC5, idents = "Sample_5A")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.5A.CellType.rds")
rownames(ref_ID) <- paste0("S5A_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_5A))
test_ID <- as.character(S_5A@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9779079
# plot reference types, transferred IDs & mismatches
S5A.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_5A, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S5A.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMC5_Sample_5A.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_5A"))

# Replicate Sample_5B

## Gather new cell type IDs as "test_ID"
Idents(PBMC5) <- PBMC5[["orig.ident"]]
S_5B <- subset(PBMC5, idents = "Sample_5B")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.5B.CellType.rds")
rownames(ref_ID) <- paste0("S5B_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_5B))
test_ID <- as.character(S_5B@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9563264
# plot reference types, transferred IDs & mismatches
S5B.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_5B, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S5B.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMC5_Sample_5B.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_5B"))
## AVERAGE CMS = 0.967117 (0.032883)


# Remove Erythrocytes from S5B & re-test
# Replicate Sample_5B: NO ERYTHROCYTES
Idents(PBMC5) <- PBMC5[["orig.ident"]]
S_5B <- subset(PBMC5, idents = "Sample_5B")
Idents(S_5B) <- S_5B[["Transfer_IDs"]]
S_5B <- subset(S_5B, idents = "Erythrocytes", invert = T)
ref_ID <- readRDS("./Data/PBMC.5B.CellType.rds")
rownames(ref_ID) <- paste0("S5B_", rownames(ref_ID))
cells.use <- intersect(rownames(ref_ID), WhichCells(S_5B))
test_ID <- as.character(S_5B@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
sum(match, na.rm = T)/length(match)
# 0.9889032 (with no erythrocyte)
S5B.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_5B, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S5B.Mismatch.Cells) +        theme(legend.position = "none") 
ggsave("./Figures/PBMC5_Sample_5B.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_5B"))

## AVERAGE CMS 5B eryth removed = 0.9834055 (0.0165945)


# Plot pooled mismatching cells
PBMC5.Mismatch.Cells <- c(S5A.Mismatch.Cells, S5B.Mismatch.Cells)
UMAPPlot(PBMC5, cols = c("grey", "red"), label = F, cells.highlight = PBMC5.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMC5_Sample_Pooled.mismatch.pdf")
rm(list = c('PBMC5.Mismatch.Cells', 'PBMC5', 'S5A.Mismatch.Cells', 'S5B.Mismatch.Cells'))
```
# Library Pooling (Together)
## PBMC 4-A/5-A: Default Workflow
```{r}
# Read PBMC 4-A & PBMC 5-A
# Read in filtered GEX matrix for PBMC 4-A (PBMC H1 Batch 1)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC3_46yoM_H1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.4A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_4A")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC4A_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.4A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)

# Read in filtered GEX matrix for PBMC 5-A (PBMC F1 Batch 1)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC1_36yoF_F1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.5A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_5A")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC5A_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.5A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)


# Merge PBMCs
PBMCs <- merge(PBMC.4A, y = PBMC.5A, add.cell.ids = c("S4A", "S5A"))
rm(list = c("PBMC.4A", "PBMC.5A"))
# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")

# Run "standard" Seurat workflow: "https://satijalab.org/seurat/articles/pbmc3k_tutorial.html"
PBMCs <- PBMCs %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData() %>% 
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMCs.pca.test <- TestPCA(PBMCs)
PBMCs.pca.test[, 1:20]
# 14 PCs with z > 1
rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:14) %>%
         FindNeighbors(reduction = "pca", dims = 1:14) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("PBMCs Sequenced Together: Default Workflow")
ggsave("./Figures/Figure3B_SamePool.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample 4-A labels
S4A.cells <- WhichCells(PBMCs, idents = "Sample_4A")
Transfer_IDs <- readRDS("./Data/PBMC.4A.CellType.rds")
rownames(Transfer_IDs) <- paste0("S4A_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S4A.cells, ]
PBMCs@meta.data[S4A.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample 5-A labels
S5A.cells <- WhichCells(PBMCs, idents = "Sample_5A")
Transfer_IDs <- readRDS("./Data/PBMC.5A.CellType.rds")
rownames(Transfer_IDs) <- paste0("S5A_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S5A.cells, ]
PBMCs@meta.data[S5A.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)

Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells",
                                            "Erythrocytes"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Naive = 7
# B_Memory = 11, 18
# T_CD4 = 0, 1, 3, 4, 16
# TReg = 13, 19
# T_CD8 = 9, 12
# NK_T = 5, 6
# NK = 2, 8
# NK_CD56Hi not a unique cluster (contained within cluster 2)
# Monocyte_Classical = 10
# Monocyte_NonClassical = 14
# Dendritic_Cells = 15, 17
# HSPCs = 20

Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(7, 11, 18, 0, 1, 3, 4, 16,
                                                         13, 19, 9, 12, 5, 6,
                                                         2, 8, 10, 14,
                                                         15, 17, 20), 
                to = c('B_Naive', 'B_Memory', 'B_Memory', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'TReg', 'TReg', 'T_CD8', 'T_CD8', 'NK_T', 'NK_T',
                       'NK', 'NK', 'Monocyte_Classical', 'Monocyte_NonClassical',
                       'Dendritic_Cells', 'Dendritic_Cells', 'HSPCs'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg",
                                   "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                   "Monocyte_Classical", "Monocyte_NonClassical",
                                   "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("PBMCs Sequenced Together: Cell Type Classifications")
ggsave("./Figures/Figure3B_PBMCs.SamePool.CellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_SamePool_LogScale_Together.rds")
PBMCs <- readRDS("./Data/PBMCs_SamePool_LogScale_Together.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_SamePool_LogScale_Together.CellType.rds")

# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4A"), "Cell_Type"]),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "Cell_Type"]))
chisq.test(tab)
# Chi-square test for cluster type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4A"), "seurat_clusters"]),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "seurat_clusters"]))
chisq.test(tab)

# Test whether replicate "B" contain more UMIs than "A"
S4A.umi <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4A"), "nCount_RNA"]
S5A.umi <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "nCount_RNA"]

wilcox.test(S4A.umi, S5A.umi)
rm(list = c('S4A.umi', 'S5A.umi'))
# Test whether replicate "B" contain more unique genes than "A"
S4A.genes <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4A"), "nFeature_RNA"]
S5A.genes <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "nFeature_RNA"]

wilcox.test(S4A.genes, S5A.genes)
rm(list = c('S4A.genes', 'S5A.genes'))
```
## Pool-Together: CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_SamePool_LogScale_Together.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 2)
# 0.7207277 (0.2792723)


# CMS Scoring by replicate
# Replicate Sample_4A

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_4A <- subset(PBMCs, idents = "Sample_4A")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.4A.CellType.rds")
rownames(ref_ID) <- paste0("S4A_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_4A))
test_ID <- as.character(S_4A@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9502127
# plot reference types, transferred IDs & mismatches
S4A.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_4A, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S4A.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCPool_Together_Sample_4A.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_4A"))




# Replicate Sample_5A

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_5A <- subset(PBMCs, idents = "Sample_5A")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.5A.CellType.rds")
rownames(ref_ID) <- paste0("S5A_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_5A))
test_ID <- as.character(S_5A@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9100854
# plot reference types, transferred IDs & mismatches
S5A.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_5A, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S5A.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCPool_Together_Sample_5A.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_4B"))

PBMCs.Mismatch.Cells <- c(S4A.Mismatch.Cells, S5A.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCPool_Together.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S4A.Mismatch.Cells', 'S5A.Mismatch.Cells'))
```

# Library Pooling (Separate)
## PBMC 4-B/5-A: Default Workflow
```{r}
# Read PBMC 4-B & PBMC 5-A
# Read in filtered GEX matrix for PBMC 4-B (PBMC H1 Batch 2)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC3_46yoM_H1/Batch2/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.4B <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_4B")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC4B_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.4B[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)

# Read in filtered GEX matrix for PBMC 5-A (PBMC F1 Batch 1)
mtx.list <- Read10X(data.dir = paste0(dd, '5GEX_PBMC1_36yoF_F1/Batch1/Filtered'),
                     gene.column = 2, unique.features = TRUE)
PBMC.5A <- CreateSeuratObject(counts = mtx.list$`Gene Expression`, project = "Sample_5A")
rm(mtx.list)
dsb.mtx <- read.csv("./Data/PBMC5A_DSB.csv", row.names = 1, header = T)
colnames(dsb.mtx) <- gsub(pattern = ".1", replacement = "-1", x = colnames(dsb.mtx))
PBMC.5A[['ADT']] <- CreateAssayObject(counts = dsb.mtx)
rm(dsb.mtx)


# Merge PBMCs
PBMCs <- merge(PBMC.4B, y = PBMC.5A, add.cell.ids = c("S4B", "S5A"))
rm(list = c("PBMC.4B", "PBMC.5A"))
# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")

# Run "standard" Seurat workflow: "https://satijalab.org/seurat/articles/pbmc3k_tutorial.html"
PBMCs <- PBMCs %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData() %>% 
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
PBMCs.pca.test <- TestPCA(PBMCs)
PBMCs.pca.test[, 1:20]
# 15 PCs with z > 1
rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:15) %>%
         FindNeighbors(reduction = "pca", dims = 1:15) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("PBMCs Sequenced Separately: Default Workflow")
ggsave("./Figures/Figure3C_DiffPool.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample 4-A labels
S4B.cells <- WhichCells(PBMCs, idents = "Sample_4B")
Transfer_IDs <- readRDS("./Data/PBMC.4B.CellType.rds")
rownames(Transfer_IDs) <- paste0("S4B_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S4B.cells, ]
PBMCs@meta.data[S4B.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample 5-A labels
S5A.cells <- WhichCells(PBMCs, idents = "Sample_5A")
Transfer_IDs <- readRDS("./Data/PBMC.5A.CellType.rds")
rownames(Transfer_IDs) <- paste0("S5A_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S5A.cells, ]
PBMCs@meta.data[S5A.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)

Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells",
                                            "Erythrocytes"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Naive = 6
# B_Memory = 10, 16
# T_CD4 = 0, 1, 2, 15, 18
# TReg not a unique cluster (contained within cluster 2)
# T_CD8 = 8, 11
# NK_T = 4, 5
# NK = 3, 7
# NK_CD56Hi not a unique cluster (contained within cluster 2)
# Monocyte_Classical = 9
# Monocyte_NonClassical = 12
# Dendritic_Cells = 13, 14
# HSPCs = 17

Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(6, 10, 16, 
                                                         0, 1, 2, 15, 18,
                                                         8, 11, 4, 5,
                                                         3, 7, 9, 12,
                                                         13, 14, 17), 
                to = c('B_Naive', 'B_Memory', 'B_Memory', 
                       'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'T_CD8', 'T_CD8', 'NK_T', 'NK_T',
                       'NK', 'NK', 'Monocyte_Classical', 'Monocyte_NonClassical',
                       'Dendritic_Cells', 'Dendritic_Cells', 'HSPCs'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                        levels = c("B_Naive", "B_Memory", "T_CD4", "TReg",
                                   "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                   "Monocyte_Classical", "Monocyte_NonClassical",
                                   "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("PBMCs Sequenced Separately: Cell Type Classifications")
ggsave("./Figures/Figure3C_PBMCs.DiffPool.CellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_DiffPool_LogScale_Together.rds")
PBMCs <- readRDS("./Data/PBMCs_DiffPool_LogScale_Together.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_DiffPool_LogScale_Together.CellType.rds")

# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4B"), "Cell_Type"]),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "Cell_Type"]))
chisq.test(tab)
# Chi-square test for cluster type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4B"), "seurat_clusters"]),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "seurat_clusters"]))
chisq.test(tab)

# Test whether replicate "B" contain more UMIs than "A"
S4B.umi <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4B"), "nCount_RNA"]
S5A.umi <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "nCount_RNA"]

wilcox.test(S4B.umi, S5A.umi)
rm(list = c('S4B.umi', 'S5A.umi'))
# Test whether replicate "B" contain more unique genes than "A"
S4B.genes <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_4B"), "nFeature_RNA"]
S5A.genes <- PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_5A"), "nFeature_RNA"]

wilcox.test(S4B.genes, S5A.genes)
rm(list = c('S4B.genes', 'S5A.genes'))
```

## Pool-Separate: CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_DiffPool_LogScale_Together.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 2)
# 0.7050495 (0.2949505)


# CMS Scoring by replicate
# Replicate Sample_4B

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_4B <- subset(PBMCs, idents = "Sample_4B")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.4B.CellType.rds")
rownames(ref_ID) <- paste0("S4B_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_4B))
test_ID <- as.character(S_4B@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9276749
# plot reference types, transferred IDs & mismatches
S4B.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_4B, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S4B.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCPool_Separate_Sample_4B.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_4A"))




# Replicate Sample_5A

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_5A <- subset(PBMCs, idents = "Sample_5A")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.5A.CellType.rds")
rownames(ref_ID) <- paste0("S5A_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_5A))
test_ID <- as.character(S_5A@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9333156
# plot reference types, transferred IDs & mismatches
S5A.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_5A, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S5A.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCPool_Separate_Sample_5A.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_5A"))

PBMCs.Mismatch.Cells <- c(S4A.Mismatch.Cells, S5A.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCPool_Together.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S4A.Mismatch.Cells', 'S5A.Mismatch.Cells'))
```

# Batch Correction
## Harmony: PBMC 1-3
```{r}
library(harmony)
# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("S1", "S2", "S3"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")


# Run "standard" Seurat + Harmony workflow: "htmlpreview.github.io/?https://github.com/immunogenomics/harmony/blob/master/docs/SeuratV3.html"
PBMCs <- PBMCs %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData() %>% 
         RunPCA(npcs = 30) %>% 
         RunHarmony("orig.ident", plot_convergence = TRUE)

PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "harmony", dims = 1:14) %>%
         FindNeighbors(reduction = "harmony", dims = 1:14) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("Harmony Workflow")
ggsave("./Figures/Figure4A_PBMCs_Harmony.replicate.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
FeaturePlot(PBMCs, "adt_CD4", pt.size = 3)

# B_Cells = 10, 11
# T_CD4 = 0, 1, 13, 16
# No TReg cluster (contained within cluster 1)
# T_CD8 = 7, 2
# NK_T = 5
# NK = 3, 18
# NKCD56Hi = 9
# Monocyte_Classical = 4, 6, 12
# Monocyte_NonClassical = 8
# Dendritic_Cells = 14, 15
# HSPCs = 19
# Cycling_Cells = 17
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(10, 11, 0, 1, 13, 16,
                                                         7, 2, 5, 3, 18, 9,
                                                         4, 6, 12, 
                                                         8, 14, 15,
                                                         19, 17), 
                to = c('B_Cells', 'B_Cells', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'T_CD8', 'T_CD8', 'NK_T', 'NK', "NK", "NK_CD56Hi",
                       'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_Classical',
                       'Monocyte_NonClassical', 'Dendritic_Cells', 'Dendritic_Cells',
                       'HSPCs', 'Cycling_Cells'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("Harmony: Cell Type Classifications")
ggsave("./Figures/Figure4A_PBMCs.HarmonyCellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_Harmony.rds")
PBMCs <- readRDS("./Data/PBMCs_Harmony.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_Harmony.CellType.rds")

# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_01"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_02"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_03"))
chisq.test(tab)
# Chi-square test for cluster homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_01"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_02"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_03"))
chisq.test(tab)
```

## Harmony: CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_Harmony.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 3)
# 0.8171875 (0.1828125)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.6966608
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_01_Harmony.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))




# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9422179
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_02_Harmony.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))




# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9007721
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_03_harmony.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))

PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_Sample_Harmony.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
```


## LIGER: PBMC 1-3
```{r}
library(rliger)
library(SeuratWrappers)

# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("S1", "S2", "S3"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")


# Run "standard" Seurat + LIGER workflow: "https://github.com/satijalab/seurat-wrappers/blob/master/docs/liger.md"
PBMCs <- PBMCs %>% 
         MitoFilter() %>% 
         NormalizeData(normalization.method = "LogNormalize", assay = "RNA", scale.factor = 10000) %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>%
         FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
         ScaleData(split.by = "orig.ident", do.center = FALSE) %>% 
         RunOptimizeALS(k = 20, lambda = 5, split.by = "orig.ident") %>% 
         RunQuantileNorm(split.by = "orig.ident") %>%
         RunUMAP(dims = 1:14, reduction = "iNMF") %>% 
         FindNeighbors(reduction = "iNMF", dims = 1:14) %>%
         FindClusters(resolution = 0.8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("LIGER Workflow")
ggsave("./Figures/Figure4A_PBMCs_LIGER.replicate.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "clusters", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "clusters", label = T)
FeaturePlot(PBMCs, "adt_CD4", pt.size = 3)


# B_Cells = 3, 10, 12, 17
# T_CD4 = 2, 19
# No TReg cluster (contained within cluster 2)
# T_CD8 = 20, 15
# NK_T = 4
# NK = 6, 16
# NK_CD56Hi = 8
# Monocyte_Classical = 1, 7, 9, 14
# Monocyte_NonClassical = 18
# Dendritic_Cells = 11, 13
# HSPCs = 5
# Cycling_Cells no cluster

Idents(PBMCs) <- PBMCs[["clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(3, 10, 12, 17, 2, 19,
                                                         20, 15, 4, 6, 16, 8,
                                                         1, 7, 9, 
                                                         14, 18, 11,
                                                         13, 5), 
                to = c('B_Cells', 'B_Cells', 'B_Cells', 'B_Cells', 'T_CD4', 'T_CD4',
                       'T_CD8', 'T_CD8', 'NK_T', 'NK', "NK", "NK_CD56Hi",
                       'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_Classical',
                       'Monocyte_Classical', 'Monocyte_NonClassical', 'Dendritic_Cells',
                       'Dendritic_Cells', 'HSPCs'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("LIGER: Cell Type Classifications")
ggsave("./Figures/Figure4B_PBMCs.LIGERCellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_LIGER.rds")
PBMCs <- readRDS("./Data/PBMCs_LIGER.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_LIGER.CellType.rds")

# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_01"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_02"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_03"))
chisq.test(tab)
# Chi-square test for cluster homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_01"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_02"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_03"))
chisq.test(tab)
```

## LIGER: CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_LIGER.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 3)
# 0.86786 (0.13214)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8108963
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_01_LIGER.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))




# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.7344358
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_02_LIGER.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))




# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.6829308
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_03_LIGER.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))

PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_Sample_LIGER.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
```

## Seurat 3: PBMC 1-3
```{r}
# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("S1", "S2", "S3"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")
PBMCs <- MitoFilter(PBMCs)
# Run "standard" Seurat3 integration workflow: "https://satijalab.org/seurat/archive/v3.0/integration.html"
PBMCs.list <- SplitObject(PBMCs, split.by = "orig.ident")
for (i in 1:length(PBMCs.list)) {
    PBMCs.list[[i]] <- SCTransform(PBMCs.list[[i]], verbose = FALSE)
}
#Next, select features for downstream integration, and run PrepSCTIntegration, which ensures that all necessary Pearson residuals have been calculated.
PBMCs.features <- SelectIntegrationFeatures(object.list = PBMCs.list, nfeatures = 3000)
#Set global object size to 2 gb to avoid errors in this next step.
options(future.globals.maxSize = 2000 * 1024^2)
PBMCs.list <- PrepSCTIntegration(object.list = PBMCs.list, anchor.features = PBMCs.features,
                                 verbose = FALSE)
#Next, identify anchors and integrate the datasets. Commands are identical to the standard workflow, but make sure to set normalization.method = 'SCT'
PBMCs.anchors <- FindIntegrationAnchors(object.list = PBMCs.list, 
                                        normalization.method = "SCT", 
                                        anchor.features = PBMCs.features, 
                                        verbose = FALSE)
PBMCs <- IntegrateData(anchorset = PBMCs.anchors, 
                       normalization.method = "SCT", verbose = FALSE)
#Now proceed with downstream analysis (i.e. visualization, clustering) on the integrated dataset. Commands are identical to the standard workflow, but do not run the ScaleData function after integration. You can see that after integration, cells group by their biological cell type, instead of by their underlying technology.
PBMCs <- RunPCA(PBMCs, npcs = 30)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:14) %>%
         FindNeighbors(reduction = "pca", dims = 1:14) %>%
         FindClusters(resolution = .8)
PBMCs <- NormalizeData(PBMCs, verbose = FALSE, assay = "ADT", normalization.method = "CLR")

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("Seurat 3 Workflow")
ggsave("./Figures/Figure4C_PBMCs_Seurat3.replicate.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
FeaturePlot(PBMCs, "FOXP3", pt.size = 3, min.cutoff = 1)

# B_Cells = 11, 14, 16
# T_CD4 = 0, 2, 3, 15
# TReg = 13
# T_CD8 = 5, 8
# NK_T = 7
# NK = 1
# NK_CD56Hi = 12
# Monocyte_Classical = 4, 6, 9
# Monocyte_NonClassical = 10
# Dendritic_Cells = 17
# HSPCs = 18
# Cycling_Cells no cluster
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(11, 14, 16, 0, 2, 3, 15,
                                                         13, 5, 8, 7, 1, 12,
                                                         4, 6, 9, 
                                                         10, 17, 18), 
                to = c('B_Cells', 'B_Cells', 'B_Cells', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'TReg', 'T_CD8', 'T_CD8', 'NK_T', "NK", "NK_CD56Hi",
                       'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_Classical',
                       'Monocyte_NonClassical', 'Dendritic_Cells', 'HSPCs'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("Seurat 3: Cell Type Classifications")
ggsave("./Figures/Figure4C_PBMCs.Seurat3CellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_Seurat3.rds")
PBMCs <- readRDS("./Data/PBMCs_Seurat3.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_Seurat3.CellType.rds")

# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_01"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_02"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "Cell_Type"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_03"))
chisq.test(tab)
# Chi-square test for cluster homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_01"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_02"),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "seurat_clusters"]) /
               sum(PBMCs[["orig.ident"]] == "Sample_03"))
chisq.test(tab)
```

1## Seurat 3: CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_Seurat3.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

set.seed(1)
x <- sample(x = seq(from=-10, to=10, by=.01), size = 90, replace = T)
set.seed(2)
y <- sample(x = seq(from=-10, to=10, by=.01), size = 90, replace = T)
a <- data.frame(UMAP_1 = x, UMAP_2 = y)
b <- data.frame(Batch_ID = c(rep('sample_1', 30),
                             rep('sample_2', 30),
                             rep('sample_3', 30)))
res <- compute_lisi(a, b, 'Batch_ID')
nSamples <- length(unique(b$Batch_ID))
sample.lisi <- median(res$Batch_ID)
ilisi <- 1 - (sample.lisi - 1) / (nSamples - 1)



ggplot(a, aes(x = UMAP_1, y = UMAP_2)) + geom_point()

GetLISI(object = PBMCs, nSamples = 3)
# 0.8086019 (0.1913981)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.7797891
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_01_Seurat3.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))




# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8229572
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_02_Seurat3.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))




# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8523082
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_03_Seurat3.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))

PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_Sample_Seurat3.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))

# AVERAGE CMS = 0.8183517 (0.1816483)
```
# Data Normalization: PBMCs 1-3
## Together
### NormalizeData/ScaleData Together
```{r}
# Already completed under "PBMC 1-3: Defualt Workflow" heading above
# Read in pre-computed object to generate figures:
PBMCs <- readRDS("./Data/PBMCs_LogScale_Together.rds")
# Average CMS = 0.90188
UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident", label = F) + 
  ggtitle("NormalizeData + ScaleData")
ggsave("./Figures/Figure5B_PBMCs.LogScaleTogether.pdf", width = 10, height = 7)
UMAPPlot(PBMCs, cols = colors.use, group.by = "Cell_Type", label = F) + 
  ggtitle("NormalizeData + ScaleData, Together: \nCell Type Classifications")
ggsave("./Figures/Mismatch_Figure_PBMCs.LogScaleTogether.CellTypes.pdf", width = 10, height = 7)

```
### SCTransform Together
```{r}
# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("S1", "S2", "S3"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")


# Run "standard" Seurat workflow: "https://satijalab.org/seurat/articles/pbmc3k_tutorial.html"
PBMCs <- PBMCs %>% 
         MitoFilter() %>% 
         NormalizeData(verbose = FALSE, assay = "ADT", normalization.method = "CLR") %>% 
         SCTransform(verbose = FALSE) %>%
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
#PBMCs.pca.test <- TestPCA(PBMCs, genes.use = PBMCs@assays$SCT@var.features,
#                          mtx.use = PBMCs@assays$SCT@scale.data)
#PBMCs.pca.test[, 1:20]
# 14 PCs with z > 1
#rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:14) %>%
         FindNeighbors(reduction = "pca", dims = 1:14) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("SCTransform")
ggsave("./Figures/Figure5B_PBMCs.SCTransformTogether.pdf", width = 10, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Cells = 10
# T_CD4 = 0, 4
# TReg = 11
# T_CD8 = 6, 7, 8, 9
# NK_T = 2
# NK = 1
# NKCD56Hi = 14
# Monocyte_Classical = 3, 5, 13
# Monocyte_NonClassical = 12
# Dendritic_Cells = 16, 17
# HSPCs = 15
# No Cycling_Cells. Within NK cluster
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(10, 0, 4, 11, 6,
                                                         7, 8, 9, 2, 1, 14,
                                                         3, 5, 13, 
                                                         12, 16, 17,
                                                         15), 
                to = c('B_Cells', 'T_CD4', 'T_CD4', 'TReg', 'T_CD8', 
                       'T_CD8', 'T_CD8', 'T_CD8', 'NK_T', "NK", 'NK_CD56Hi',
                       'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_Classical',
                       'Monocyte_NonClassical', 'Dendritic_Cells', 'Dendritic_Cells',
                       'HSPCs'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("Cell Type Classifications")
ggsave("./Figures/FigureS6_PBMCs.SCT_Together.CellTypes.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_SCTransform_Together.rds")
PBMCs <- readRDS("./Data/PBMCs_SCTransform_Together.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_SCTransform_Together.CellType.rds")

UMAPPlot(PBMCs, cols = colors.use, group.by = "Cell_Type", label = F) + 
  ggtitle("SCTransform, Together: \nCell Type Classifications")
ggsave("./Figures/Mismatch_Figure_PBMCs.SCTransformTogether.CellTypes.pdf", width = 10, height = 7)
# Chi-square test for cell type homogeneity
tab <- rbind(table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_01"), "Cell_Type"]),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_02"), "Cell_Type"]),
      table(PBMCs@meta.data[which(PBMCs[["orig.ident"]] == "Sample_03"), "Cell_Type"]))
chisq.test(tab)
```
### CMS: SCTransform Together
```{r}
PBMCs <- readRDS("./Data/PBMCs_SCTransform_Together.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 3)
# 0.4414927 (0.5585073)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.7915641
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_SCTransform_01.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))

# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8254864
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) + theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_SCTransform_02.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))

# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.7708231
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_SCTransform_03.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))

PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_SCTransform.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
# Average CMS = 0.795958
```
## Independent
### NormalizeData/ScaleData
```{r}
# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("S1", "S2", "S3"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")
PBMCs <- MitoFilter(PBMCs)
# Run "standard" Seurat workflow on a list of samples, independently:
PBMCs.list <- SplitObject(PBMCs, split.by = "orig.ident")
features.list <- list()
for (i in 1:length(PBMCs.list)) {
    PBMCs.list[[i]] <- PBMCs.list[[i]] %>% 
                       NormalizeData(normalization.method = "LogNormalize", 
                                     assay = "RNA", scale.factor = 10000) %>% 
                       NormalizeData(normalization.method = "CLR", 
                                     assay = "ADT") %>%
                       FindVariableFeatures(selection.method = "vst", 
                                            nfeatures = 2000)
    features.list[[i]] <- PBMCs.list[[i]]@assays$RNA@var.features
}
var.features <- Reduce(intersect, list(features.list[[1]],
                                   features.list[[2]],
                                   features.list[[3]]))
PBMCs <- merge(PBMCs.list[[1]], y = c(PBMCs.list[[2]], PBMCs.list[[3]]),
               project = "PBMCs")
PBMCs@assays$RNA@var.features <- var.features
rm(var.features)
PBMCs <- PBMCs %>%
         ScaleData() %>% 
         RunPCA(npcs = 30)
# Identify correct numbers of PCs
# PBMCs.pca.test <- TestPCA(PBMCs)
# PBMCs.pca.test[, 1:20]
# 9 PCs with z > 1
#rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:9) %>%
         FindNeighbors(reduction = "pca", dims = 1:9) %>%
         FindClusters(resolution = .8)


# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)

# B_Cells = 8
# T_CD4 = 0, 1, 13
# No TReg: Within cluster 1
# T_CD8 = 2, 7
# NK_T = 5
# NK = 3
# NK_CD56Hi = 10
# Monocyte_Classical = 4, 6
# Monocyte_NonClassical = 9
# Dendritic_Cells = 11, 12
# HSPCs = no cluster
# Cycling_Cells = no cluster
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(8, 0, 1, 13,
                                                         2, 7, 5, 3, 10,
                                                         4, 6, 
                                                         9, 11, 12), 
                to = c('B_Cells', 'T_CD4', 'T_CD4', 'T_CD4',
                       'T_CD8', 'T_CD8', 'NK_T', "NK", "NK_CD56Hi",
                       'Monocyte_Classical', 'Monocyte_Classical', 
                       'Monocyte_NonClassical', 'Dendritic_Cells', 'Dendritic_Cells'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F, group.by = "orig.ident") + 
  ggtitle("NormalizeData + ScaleData")
ggsave("./Figures/Figure5A_PBMCs.LogScaleIndependent.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_LogScaleIndependent.rds")
PBMCs <- readRDS("./Data/PBMCs_LogScaleIndependent.rds")
UMAPPlot(PBMCs, cols = colors.use, group.by = "Cell_Type", label = F) + 
  ggtitle("NormalizeData + ScaleData, Independent: \nCell Type Classifications")
ggsave("./Figures/Mismatch_Figure_PBMCs.LogScaleIndependent.CellTypes.pdf", width = 10, height = 7)


saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_LogScaleIndependent.CellType.rds")
```
### CMS: NormalizeData/ScaleData Independently
```{r}
PBMCs <- readRDS("./Data/PBMCs_LogScaleIndependent.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 3)
# 0.789387 (0.210613)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.6943761
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_LogScaleIndependent_01.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))

# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.9392996
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) + theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_LogScaleIndependent_02.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))

# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8866437
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_LogScaleIndependent_03.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))

PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_LogScaleIndependent.mismatch.pdf", width = 7, height = 7)
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
# Average CMS = 0.8401063
```


### SCTransform Independent
```{r}
# Read PBMC 1
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_EG_3exp_lib_i7-A6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.1 <- CreateSeuratObject(counts = gex, project = "Sample_01")
PBMC.1[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 2
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AFD_3exp_lib_i7-B6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.2 <- CreateSeuratObject(counts = gex, project = "Sample_02")
PBMC.2[['ADT']] <- CreateAssayObject(counts = adt)
# Read PBMC 3
gex <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/GEX'),
                     gene.column = 2, unique.features = TRUE, strip.suffix = T)
adt <- Read10X(data.dir = paste0(dd, 'PBMC_Blood_AK_3exp_lib_i7-C6/ADT'),
                     gene.column = 1, unique.features = TRUE, strip.suffix = T)
rownames(adt) <- plyr::mapvalues(x = rownames(adt),
                                 from = rownames(adt),
                                 to = split.CD(rownames(adt)))
PBMC.3 <- CreateSeuratObject(counts = gex, project = "Sample_03")
rm(gex)
PBMC.3[['ADT']] <- CreateAssayObject(counts = adt)
rm(adt)

PBMCs <- merge(PBMC.1, y = c(PBMC.2, PBMC.3), add.cell.ids = c("S1", "S2", "S3"), project = "PBMCs")
rm(list = c('PBMC.1', 'PBMC.2', 'PBMC.3'))

# Add mitochondrial percentage
PBMCs[["percent.mito"]] <- PercentageFeatureSet(PBMCs, pattern = "^MT-")
# Add ribosomal percentage (regex: "starts with 'RP' followed by either 'S' or 'L'")
PBMCs[["percent.ribo"]] <- PercentageFeatureSet(PBMCs, pattern = "^RP(S|L)")
PBMCs <- MitoFilter(PBMCs)
# Run "standard" Seurat workflow on a list of samples, independently:
PBMCs.list <- SplitObject(PBMCs, split.by = "orig.ident")
features.list <- list()
for (i in 1:length(PBMCs.list)) {
    PBMCs.list[[i]] <- PBMCs.list[[i]] %>%
                       MitoFilter() %>% 
                       NormalizeData(verbose = FALSE, assay = "ADT", 
                                     normalization.method = "CLR") %>% 
                       SCTransform(verbose = FALSE) %>%
                       RunPCA(npcs = 30)
    features.list[[i]] <- PBMCs.list[[i]]@assays$SCT@var.features
}
var.features <- Reduce(intersect, list(features.list[[1]],
                                   features.list[[2]],
                                   features.list[[3]]))
PBMCs <- merge(PBMCs.list[[1]], y = c(PBMCs.list[[2]], PBMCs.list[[3]]),
               project = "PBMCs")
PBMCs@assays$SCT@var.features <- var.features
rm(var.features)
PBMCs <- PBMCs %>% 
         RunPCA(npcs = 30, assay = "SCT")
# Identify correct numbers of PCs
#PBMCs.pca.test <- TestPCA(PBMCs, genes.use = PBMCs@assays$SCT@var.features,
#                          mtx.use = PBMCs@assays$SCT@scale.data)
#PBMCs.pca.test[, 1:20]
# 9 PCs with z > 1
#rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:9) %>%
         FindNeighbors(reduction = "pca", dims = 1:9) %>%
         FindClusters(resolution = .8)


# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)

# B_Cells = 11
# T_CD4 = 0, 6, 8, 10, 15
# No TReg: Within cluster 10
# T_CD8 = 3, 4, 9, 14
# NK_T = 7
# NK = 1
# NK_CD56Hi = 13
# Monocyte_Classical = 2, 5
# Monocyte_NonClassical = 12
# Dendritic_Cells = 16, 17
# HSPCs = no cluster
# Cycling_Cells = no cluster
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(11, 0, 6, 8, 10, 15,
                                                         3, 4, 9, 14, 7,
                                                         1, 13, 
                                                         2, 5,
                                                         12, 16, 17), 
                to = c('B_Cells', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4', 'T_CD4',
                       'T_CD8', 'T_CD8', 'T_CD8', 'T_CD8', 'NK_T', 
                       "NK", "NK_CD56Hi",
                       'Monocyte_Classical', 'Monocyte_Classical', 
                       'Monocyte_NonClassical', 'Dendritic_Cells', 'Dendritic_Cells'))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
UMAPPlot(PBMCs, cols = colors.use, label = F, group.by = "orig.ident") + ggtitle("SCTransform")
ggsave("./Figures/Figure5A_PBMCs.SCTransformIndependent.pdf", width = 10, height = 7)
saveRDS(PBMCs, "./Data/PBMCs_SCTransformIndependent.rds")
PBMCs <- readRDS("./Data/PBMCs_SCTransformIndependent.rds")
UMAPPlot(PBMCs, cols = colors.use, group.by = "Cell_Type", label = F) + 
  ggtitle("SCTransform, Independent: \nCell Type Classifications")
ggsave("./Figures/Mismatch_Figure_PBMCs.SCTransformIndependent.CellTypes.pdf", width = 10, height = 7)

saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_SCTransformIndependent.CellType.rds")
```
### CMS: SCTransform Independently
```{r}
PBMCs <- readRDS("./Data/PBMCs_SCTransformIndependent.rds")

# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal

GetLISI <- function(object, nSamples) {
  coords <- object@reductions$umap@cell.embeddings
  sample_cats <- data.frame("orig.ident" = object@meta.data$orig.ident)
  res <- compute_lisi(coords, sample_cats, c('orig.ident'))
  sample.lisi <- median(res$orig.ident)
  adjusted.lisi <- (sample.lisi - 1) / (nSamples - 1)
  return(adjusted.lisi)
}

GetLISI(object = PBMCs, nSamples = 3)
# 0.5843223 (0.4156777)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8213783
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_SCTransformIndependent_01.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))

# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.7181889
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) + theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_SCTransformIndependent_02.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))

# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.854321
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_SCTransformIndependent_03.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))

PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_SCTransformIndependent.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
# Average CMS = 0.7979627

```
# Causes for Norm-Effects
```{r}
# Isolate the subset of cells which are mismatched in sample 01, default workflow
######################################
## LogScale, Together, S01 Mismatch ##
######################################
PBMCs <- readRDS("./Data/PBMCs_LogScale_Together.rds")
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']

S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]

PBMCs[["S1.TIDs"]] <- rep("0", nrow(PBMCs[[]]))
PBMCs@meta.data[WhichCells(S_01), "S1.TIDs"] <- as.character(S_01@meta.data[, "Transfer_IDs"])
# plot mismatch cells & compare to cell types

DimPlot(PBMCs, reduction = "umap", group.by = "S1.TIDs", cols = c(grey(0.7),colors.use)) + 
  ggtitle("PBMCs 1-3, colored by PBMC 1 Cell Types") + theme(legend.position = "none")
ggsave("./Figures/Figure06_PBMC01_CellTypes.pdf", width = 7, height = 7)
DimPlot(PBMCs, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") + 
  ggtitle("PBMCs 1-3, colored by PBMC 1 Cell Mismatches")
ggsave("./Figures/Figure06_PBMC01_Mismatches.pdf", width = 7, height = 7)
DimPlot(PBMCs, reduction = "umap", group.by = "seurat_clusters", cols = c(colors.use)) + 
  ggtitle("PBMCs 1-3, colored by Pooled (PBMCs 1-3) Clusters") +        theme(legend.position = "none") 
ggsave("./Figures/Figure06_PBMCs_Clusters.pdf", width = 7, height = 7)
DimPlot(PBMCs, reduction = "umap", group.by = "orig.ident", cols = c(colors.use[1], grey(0.4), grey(0.7))) + 
  ggtitle("PBMCs 1-3, colored by Sample ID (PBMCs 1-3)") + theme(legend.position = "none") 
ggsave("./Figures/Figure06_PBMCs_SampleID.pdf", width = 7, height = 7)
DimPlot(PBMCs, reduction = "umap", group.by = "orig.ident", cols = colors.use) + 
  ggtitle("PBMCs 1-3, colored by Sample ID (PBMCs 1-3)") + theme(legend.position = "none") 
ggsave("./Figures/Figure06_PBMCs_BeforeRemoval.pdf", width = 7, height = 7)
# Identify Marker Genes for mismatched cells
# Cells are T_CD8 which group with NK_T (sample 01) incorrectly.
# Compare mismatched CD8+ with correctly grouped NK_T (samples 2-3)
# Analogouos cluster of "correct T_CD8 are cluster 7
S1_T_CD8 <- WhichCells(PBMCs, expression = `S1.TIDs` == "T_CD8" & `orig.ident` == "Sample_01")
S1.cells.test <- intersect(S1_T_CD8, S1.Mismatch.Cells)
S23.cells.test <- WhichCells(PBMCs, expression = `seurat_clusters` == 7)
m <- FindMarkers(PBMCs, ident.1 = S1.cells.test, ident.2 = S23.cells.test, test.use = "bimod")
#m <- m[which(m$p_val_adj < 0.01 & m$pct.1 > 0.5 & m$pct.2 > 0.5), ]
m <- m[which(rownames(m) %in% PBMCs@assays$RNA@var.features), ]
# restrict genes to exclude those present in HVGs of the best integrated sample
# Norm/Scale before merging has minimal batch effects, so excluding those HVGs will limit to genes which are potentially responsible for strong batch effect

IntPBMCs <- readRDS("./Data/PBMCs_LogScaleIndependent.rds")
IntegratedHVGS <- IntPBMCs@assays$RNA@var.features

m <- m[which(!rownames(m) %in% IntegratedHVGS), ]
write.csv(m, "./Figures/SupplementaryTable04.csv")
# Remove "m" genes from the poorly integrated PBMC variable features
BE_Var.features <- PBMCs@assays$RNA@var.features
BE_Var.features <- BE_Var.features[which(!BE_Var.features %in% rownames(m))]
PBMCs@assays$RNA@var.features <- BE_Var.features
rm(BE_Var.features)

# Re-run PCA, UMAP & clustering with "problem" genes removed

PBMCs <- ScaleData(PBMCs)
PBMCs <- RunPCA(PBMCs, npcs = 30)
# Identify correct numbers of PCs
#PBMCs.pca.test <- TestPCA(PBMCs)
#PBMCs.pca.test[, 1:20]
# 13 PCs with z > 1
#rm(PBMCs.pca.test)
PBMCs <- PBMCs %>% 
         RunUMAP(reduction = "pca", dims = 1:13) %>%
         FindNeighbors(reduction = "pca", dims = 1:13) %>%
         FindClusters(resolution = .8)

UMAPPlot(PBMCs, cols = colors.use, group.by = "orig.ident") + ggtitle("Seurat Workflow") +
  theme(legend.position = "None")
ggsave("./Figures/Figure06_ProblemGenesRemoved_UMAP.pdf", width = 7, height = 7)

# Cell Typing of joint PBMCs object for CMS
Idents(PBMCs) <- PBMCs[["orig.ident"]]
PBMCs[["Transfer_IDs"]] <- rep("NA", nrow(PBMCs[[]]))
# Transfer Sample_01 labels
S1.cells <- WhichCells(PBMCs, idents = "Sample_01")
Transfer_IDs <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(Transfer_IDs) <- paste0("S1_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S1.cells, ]
PBMCs@meta.data[S1.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_02 labels
S2.cells <- WhichCells(PBMCs, idents = "Sample_02")
Transfer_IDs <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(Transfer_IDs) <- paste0("S2_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S2.cells, ]
PBMCs@meta.data[S2.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
# Transfer Sample_03 labels
S3.cells <- WhichCells(PBMCs, idents = "Sample_03")
Transfer_IDs <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(Transfer_IDs) <- paste0("S3_", rownames(Transfer_IDs))
Transfer_IDs <- Transfer_IDs[S3.cells, ]
PBMCs@meta.data[S3.cells, "Transfer_IDs"] <- as.character(Transfer_IDs)
rm(list = c('Transfer_IDs', 'S1.cells', 'S2.cells', 'S3.cells'))
Idents(PBMCs) <- PBMCs[['Transfer_IDs']]
# Format factor order
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells"))
PBMCs[['Transfer_IDs']] <-Idents(PBMCs)

UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "Transfer_IDs", label = T)
UMAPPlot(PBMCs, cols = colors.use, pt.size = 2, 
         group.by = "seurat_clusters", label = T)
# B_Cells = 10, 11
# T_CD4 = 0, 3, 15, 16
# No TReg cluster (contained within cluster 3)
# T_CD8 = 2, 6
# NK_T = 5
# NK = 4, 17
# NKCD56Hi = 9
# Monocyte_Classical = 1, 7, 12
# Monocyte_NonClassical = 8
# Dendritic_Cells = 13
# HSPCs = no cluster
# Cycling_Cells = 18
# Unclassified = 14
Idents(PBMCs) <- PBMCs[["seurat_clusters"]]
Idents(PBMCs) <- plyr::mapvalues(Idents(PBMCs), from = c(10, 11, 0, 3, 15, 16,
                                                         2, 6, 5, 4, 17, 9,
                                                         1, 7, 12,
                                                         8, 13, 18,
                                                         14), 
                to = c('B_Cells', 'B_Cells', 'T_CD4', 'T_CD4', 'T_CD4', "T_CD4",
                       'T_CD8', 'T_CD8', 'NK_T', "NK", "NK", 'NK_CD56Hi',
                       'Monocyte_Classical', 'Monocyte_Classical', 'Monocyte_Classical',
                       'Monocyte_NonClassical', 'Dendritic_Cells', 'Cycling_Cells',
                       "Unclassified"))
Idents(PBMCs) <- factor(Idents(PBMCs),
                                 levels = c("B_Cells", "T_CD4", "TReg", 
                                            "T_CD8", "NK_T", "NK", "NK_CD56Hi",
                                            "Monocyte_Classical", "Monocyte_NonClassical",
                                            "Dendritic_Cells", "HSPCs", "Cycling_Cells",
                                            "Unclassified"))
PBMCs[["Cell_Type"]] <- Idents(PBMCs)
p <- UMAPPlot(PBMCs, cols = colors.use, label = F) + ggtitle("Cell Type Classifications") +
  theme(legend.position = "none")
ggsave("./Figures/Figure06_GenesRemovedPBMCs.CellTypes.pdf", width = 7, height = 7, p)
saveRDS(PBMCs, "./Data/PBMCs_LogScale_Together_GenesRemoved.rds")
#PBMCs <- readRDS("./Data/PBMCs_LogScale_Together_GenesRemoved.rds")
saveRDS(PBMCs[["Cell_Type"]], "./Data/PBMCs_LogScale_Together_GenesRemoved.CellType.rds")

# Get median UMI values for cells expressing DEGs
mtx.test <- PBMCs@assays$RNA@counts[rownames(m), ]
t <- apply(mtx.test, 1, FUN = function(x) median(x[which(x > 0)]))

# Get percent of cells expressing DEGs
mtx.test <- PBMCs@assays$RNA@counts[rownames(m), ]
t <- apply(mtx.test, 1, FUN = function(x) sum(x > 0)/ncol(mtx.test))
write.csv(t, "./percent_expression.csv")

# Get average of median UMI values for all HVGs
mtx.test <- PBMCs@assays$RNA@counts[PBMCs@assays$RNA@var.features, ]
t <- apply(mtx.test, 1, FUN = function(x) median(x[which(x > 0)]))
mean(t)




```



# PBMC 1-3: Genes Removed CMS Scoring
```{r}
PBMCs <- readRDS("./Data/PBMCs_LogScale_Together_GenesRemoved.rds")
# Compute the LISI scores
## We want to know the LISI for orig.ident - aka the sample ID

coords <- PBMCs@reductions$umap@cell.embeddings
sample_cats <- data.frame("orig.ident" = PBMCs@meta.data$orig.ident,
                          "seurat_clusters" = PBMCs@meta.data$Cell_Type)
res <- compute_lisi(coords, sample_cats, c('orig.ident', 'seurat_clusters'))
sample.lisi <- median(res$orig.ident)
min.lisi <- median(res$seurat_clusters)
# Generate an "adjusted lisi"
## The minimum LISI is close to 1, and the maximum is close to 3
### Therefore the "minimum / maximum" is a score of ~0.3
## Subtract the minimum from both the sample value, and the maximum value
## The result will be interpreted on a range of 0-1, where 1 is optimal
adjusted.lisi <- (sample.lisi - min.lisi) / (3 - min.lisi)
adjusted.lisi
# 0.6867724 (0.3132276)


# CMS Scoring by replicate
# Replicate Sample_01

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_01 <- subset(PBMCs, idents = "Sample_01")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.1.CellType.rds")
rownames(ref_ID) <- paste0("S1_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_01))
test_ID <- as.character(S_01@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.6910369
# plot reference types, transferred IDs & mismatches
S1.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_01, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S1.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_01_GenesRemoved.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_01"))




# Replicate Sample_02

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_02 <- subset(PBMCs, idents = "Sample_02")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.2.CellType.rds")
rownames(ref_ID) <- paste0("S2_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_02))
test_ID <- as.character(S_02@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8917365
# plot reference types, transferred IDs & mismatches
S2.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_02, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S2.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_02_GenesRemoved.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_02"))




# Replicate Sample_03

## Gather new cell type IDs as "test_ID"
Idents(PBMCs) <- PBMCs[["orig.ident"]]
S_03 <- subset(PBMCs, idents = "Sample_03")
## Gather single-sample cell IDs as "ref_ID"
ref_ID <- readRDS("./Data/PBMC.3.CellType.rds")
rownames(ref_ID) <- paste0("S3_", rownames(ref_ID))
## Limit to shared cells (between group & solo workflows)
cells.use <- intersect(rownames(ref_ID), WhichCells(S_03))
test_ID <- as.character(S_03@meta.data[cells.use, 'Cell_Type'])
ref_ID <- as.character(ref_ID[cells.use, 'Cell_Type'])
## Create matrix with cell type columns
Mismatch.mtx <- cbind(ref_ID, test_ID)
rownames(Mismatch.mtx) <- cells.use
# Find which test (group-workflow) IDs match reference (single-workflow)
match <- Mismatch.mtx[, 'ref_ID'] == Mismatch.mtx[, 'test_ID']
# Divide the number of matches by the total number of cells
sum(match, na.rm = T)/length(match)
# 0.8917365
# plot reference types, transferred IDs & mismatches
S3.Mismatch.Cells <- rownames(Mismatch.mtx)[which(!match)]
DimPlot(S_03, reduction = "umap", cols = c(grey(0.7), "red"), cells.highlight = S3.Mismatch.Cells) +        theme(legend.position = "none") 
# save plots for later
ggsave("./Figures/PBMCs_Sample_03_GenesRemoved.mismatch.pdf")
rm(list = c("match", "Mismatch.mtx", 'ref_ID', 'test_ID', 'cells.use', "S_03"))
# Average CMS = 0.8248367 (0.1751633)




PBMCs.Mismatch.Cells <- c(S1.Mismatch.Cells, S2.Mismatch.Cells, S3.Mismatch.Cells)
UMAPPlot(PBMCs, cols = c("grey", "red"), label = F, cells.highlight = PBMCs.Mismatch.Cells) +
  theme(legend.position = "none") 
ggsave("./Figures/PBMCs_Sample_Pooled_GenesRemoved.mismatch.pdf")
rm(list = c('PBMCs.Mismatch.Cells', 'PBMCs', 'S1.Mismatch.Cells', 'S2.Mismatch.Cells', 'S3.Mismatch.Cells'))
```
# Pubmed Results / Supplementary 01
```{r}
results <- read.csv("~/Downloads/PubMed_Timeline_Results_by_Year.csv",header = T)
p <- ggplot(data = results, aes(x = Year, y = Count, fill = Count)) +
     ggtitle("\"Single Cell RNA\" Pubmed Results by Year, 1999-2020") +
     geom_bar(stat = "identity") + 
     coord_cartesian(xlim = c(2000, 2020)) +
     theme_minimal() +
     theme(legend.position = "none", plot.title.position = "plot") + 
     ylab("Citations") +
     scale_fill_gradient(low = emory.cols[3], high = emory.cols[1])
p
ggsave("~/OneDrive - Emory University/Ghosn_Lab/Batch/Workflow/Figures/Named_Figures/SupplementarFigure01")
rm(list = c('results', 'p'))
```

