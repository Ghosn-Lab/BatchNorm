"0","```r

process_vdj_01 <- function(sample_index){
  summary_dir <- paste0(\"~/OneDrive - Emory University/Ghosn_Lab/scRNA_Data/UCSF/\", 
                      sample_index,
                      \"/VDJ\")
    ## Create a subdirectory for processed outputs
  dir.create(paste0(summary_dir, \"/SuPERR-Seq_processed\"))
  setwd(paste0(summary_dir, \"/SuPERR-Seq_processed\"))
  
  process_cellranger_outputs(cellranger_csv = paste0(summary_dir, \"/all_contig_annotations.csv\"),
                             cellranger_fasta = paste0(summary_dir, \"/all_contig.fasta\"),
                             index = sample_index,
                             do_filter = TRUE,
                             filter_read_count = 50,
                             filter_umi_count = 2)
}

process_vdj_02 <- function(sample_index){
  summary_dir <- paste0(\"~/OneDrive - Emory University/Ghosn_Lab/scRNA_Data/UCSF/\", 
                      sample_index,
                      \"/VDJ/IMGT\")
  outs_dir <- paste0(summary_dir, \"/SuPERR-Seq_processed/\")
  seurat_dir <- paste0(outs_dir, \"/seurat/\")
  seurat_mtx <- paste0(seurat_dir, \"vdj_features/\")
  dir.create(outs_dir)
  dir.create(seurat_dir)
  dir.create(seurat_mtx)
  
  
  ##Create all of the processed files using the above functions
  summary <- process_imgt_summary_file(summary_dir)
  message(paste(sample_index, \"Summary Processed: Step 1/10\"), sep = \"\n\")
  gapped_nt <- process_imgt_gapped_nt_sequences_file(summary_dir)
  message(paste(sample_index, \"Gapped NT Sequences Processed: Step 2/10\"), sep = \"\n\")
  nt_sequences <- process_imgt_nt_sequences_file(summary_dir)
  message(paste(sample_index, \"NT Sequences Processed: Step 3/10\"), sep = \"\n\")
  gapped_aa <- process_imgt_gapped_aa_sequences_file(summary_dir)
  message(paste(sample_index, \"Gapped AA Sequences Processed: Step 4/10\"), sep = \"\n\")
  aa_sequences <- process_imgt_aa_sequences_file(summary_dir)
  message(paste(sample_index, \"AA Sequences Processed: Step 5/10\"), sep = \"\n\")
  nt_mutations <- process_imgt_v_region_nt_mutation_statistics_file(summary_dir)
  message(paste(sample_index, \"NT Mutations Processed: Step 6/10\"), sep = \"\n\")
  aa_mutations <- process_imgt_v_region_aa_change_statistics_file(summary_dir)
  message(paste(sample_index, \"AA Mutations Processed: Step 7/10\"), sep = \"\n\")
  hotspot_mutations <- process_imgt_v_region_mutation_hotspots_files(summary_dir)
  message(paste(sample_index, \"Hotspots Processed: Step 8/10\"), sep = \"\n\")
  detailed_mutations <- suppressWarnings(extract_mutation_data(summary_dir))
  message(paste(sample_index, \"Detailed Mutations Processed: Step 9/10\"), sep = \"\n\")
      ##Return the detailed mutation data
  write_csv(detailed_mutations, paste0(\"superrseq_processed_detailed_mutation_data.index_\", 
                                       sample_index, \".csv\"))
  ##Bind them together using the sequence_id 
  combined_tibble <- plyr::join_all(list(summary,
                                         gapped_nt,
                                         nt_sequences,
                                         gapped_aa,
                                         aa_sequences,
                                         nt_mutations,
                                         aa_mutations,
                                         hotspot_mutations),
                                    by = \"sequence_id\")
    
    ##Add additional statistics of relavance to future study
    combined_tibble <- combined_tibble %>%
    mutate(fr1_nt_mut_freq = fr1_imgt_nb_of_mutations / fr1_imgt_nb_of_nucleotides * 100, ## Mutation frequencies
           fr2_nt_mut_freq = fr2_imgt_nb_of_mutations / fr2_imgt_nb_of_nucleotides * 100,
           fr3_nt_mut_freq = fr3_imgt_nb_of_mutations / fr3_imgt_nb_of_nucleotides * 100,
           fr_imgt_nb_of_mutations = fr1_imgt_nb_of_mutations + fr2_imgt_nb_of_mutations +   fr3_imgt_nb_of_mutations,
           fr_imgt_nb_of_nucleotides = fr1_imgt_nb_of_nucleotides + fr2_imgt_nb_of_nucleotides +   fr3_imgt_nb_of_nucleotides,
           fr_nt_mut_freq = fr_imgt_nb_of_mutations / fr_imgt_nb_of_nucleotides * 100,
           cdr1_nt_mut_freq = cdr1_imgt_nb_of_mutations / cdr1_imgt_nb_of_nucleotides * 100,
           cdr2_nt_mut_freq = cdr2_imgt_nb_of_mutations / cdr2_imgt_nb_of_nucleotides * 100,
           cdr_imgt_nb_of_mutations = cdr1_imgt_nb_of_mutations + cdr2_imgt_nb_of_mutations,
           cdr_imgt_nb_of_nucleotides = cdr1_imgt_nb_of_nucleotides + cdr2_imgt_nb_of_nucleotides,
           cdr_nt_mut_freq = cdr_imgt_nb_of_mutations / cdr_imgt_nb_of_nucleotides * 100,
           cdr3_nt_mut_freq = cdr3_imgt_nb_of_mutations / cdr3_imgt_nb_of_nucleotides * 100,
           non_junction_nt_mut_freq = (cdr_imgt_nb_of_mutations + fr_imgt_nb_of_mutations) /   (cdr_imgt_nb_of_nucleotides + fr_imgt_nb_of_nucleotides) * 100,
           v_nt_mut_freq = v_region_nb_of_mutations / v_region_nb_of_nucleotides * 100,
           
           fr1_nonsilent_mut_ratio = fr1_imgt_nb_of_nonsilent_mutations / fr1_imgt_nb_of_mutations, ## Nonsilent   mutation ratios
           fr2_nonsilent_mut_ratio = fr2_imgt_nb_of_nonsilent_mutations / fr2_imgt_nb_of_mutations,
           fr3_nonsilent_mut_ratio = fr3_imgt_nb_of_nonsilent_mutations / fr3_imgt_nb_of_mutations,
           cdr1_nonsilent_mut_ratio = cdr1_imgt_nb_of_nonsilent_mutations / cdr1_imgt_nb_of_mutations,
           cdr2_nonsilent_mut_ratio = cdr2_imgt_nb_of_nonsilent_mutations / cdr2_imgt_nb_of_mutations,
           cdr3_nonsilent_mut_ratio = cdr3_imgt_nb_of_nonsilent_mutations / cdr3_imgt_nb_of_mutations,
           v_nonsilent_mut_ratio = v_region_nb_of_nonsilent_mutations / v_region_nb_of_mutations,
           
           fr1_transitions = (fr1_imgt_a_into_g + fr1_imgt_g_into_a + fr1_imgt_c_into_t + fr1_imgt_t_into_c), ##   Transition vs transversion counts
           fr1_transversions = fr1_imgt_nb_of_mutations - fr1_transitions,
           fr2_transitions = (fr2_imgt_a_into_g + fr2_imgt_g_into_a + fr2_imgt_c_into_t + fr2_imgt_t_into_c),
           fr2_transversions = fr2_imgt_nb_of_mutations - fr2_transitions,
           fr3_transitions = (fr3_imgt_a_into_g + fr3_imgt_g_into_a + fr3_imgt_c_into_t + fr3_imgt_t_into_c),
           fr3_transversions = fr3_imgt_nb_of_mutations - fr3_transitions,
           cdr1_transitions = (cdr1_imgt_a_into_g + cdr1_imgt_g_into_a + cdr1_imgt_c_into_t + cdr1_imgt_t_into_c),
           cdr1_transversions = cdr1_imgt_nb_of_mutations - cdr1_transitions,
           cdr2_transitions = (cdr2_imgt_a_into_g + cdr2_imgt_g_into_a + cdr2_imgt_c_into_t + cdr2_imgt_t_into_c),
           cdr2_transversions = cdr2_imgt_nb_of_mutations - cdr2_transitions,
           cdr3_transitions = (cdr3_imgt_a_into_g + cdr3_imgt_g_into_a + cdr3_imgt_c_into_t + cdr3_imgt_t_into_c),
           cdr3_transversions = cdr3_imgt_nb_of_mutations - cdr3_transitions,
           non_junction_v_transitions = fr1_transitions + fr2_transitions + fr3_transitions + cdr1_transitions +   cdr2_transitions,
           non_junction_v_transversions = fr1_transversions + fr2_transversions + fr3_transversions +   cdr1_transversions + cdr2_transversions,
           
           fr1_transition_ratio = fr1_transitions / fr1_imgt_nb_of_mutations, ## Transition ratios
           fr2_transition_ratio = fr2_transitions / fr2_imgt_nb_of_mutations,
           fr3_transition_ratio = fr3_transitions / fr3_imgt_nb_of_mutations,
           cdr1_transition_ratio = cdr1_transitions / cdr1_imgt_nb_of_mutations,
           cdr2_transition_ratio = cdr2_transitions / cdr2_imgt_nb_of_mutations,
           cdr3_transition_ratio = cdr3_transitions / cdr3_imgt_nb_of_mutations,
           non_junction_transition_ratio = non_junction_v_transitions / (fr1_imgt_nb_of_mutations +   fr2_imgt_nb_of_mutations + fr3_imgt_nb_of_mutations + cdr1_imgt_nb_of_mutations + cdr2_imgt_nb_of_mutations),
           
           fr1_aa_mut_freq = fr1_imgt_nb_of_aa_changes / fr1_imgt_nb_of_aa * 100, ## Amino acid conversion   frequency
           fr2_aa_mut_freq = fr2_imgt_nb_of_aa_changes / fr2_imgt_nb_of_aa * 100,
           fr3_aa_mut_freq = fr3_imgt_nb_of_aa_changes / fr3_imgt_nb_of_aa * 100,
           fr_imgt_nb_of_aa_changes = fr1_imgt_nb_of_aa_changes + fr2_imgt_nb_of_aa_changes +   fr2_imgt_nb_of_aa_changes,
           fr_imgt_nb_of_aa = fr1_imgt_nb_of_aa + fr2_imgt_nb_of_aa + fr2_imgt_nb_of_aa,
           fr_aa_mut_freq = fr_imgt_nb_of_aa_changes / fr_imgt_nb_of_aa * 100,
           cdr1_aa_mut_freq = cdr1_imgt_nb_of_aa_changes / cdr1_imgt_nb_of_aa * 100,
           cdr2_aa_mut_freq = cdr2_imgt_nb_of_aa_changes / cdr2_imgt_nb_of_aa * 100,
           cdr_imgt_nb_of_aa_changes = cdr1_imgt_nb_of_aa_changes + cdr2_imgt_nb_of_aa_changes,
           cdr_imgt_nb_of_aa = cdr1_imgt_nb_of_aa + cdr2_imgt_nb_of_aa,
           non_junction_aa_mut_freq = (fr_imgt_nb_of_aa_changes + cdr_imgt_nb_of_aa_changes) / (fr_imgt_nb_of_aa +   cdr_imgt_nb_of_aa) * 100,
           cdr3_aa_mut_freq = cdr3_imgt_nb_of_aa_changes / cdr3_imgt_nb_of_aa * 100,
           v_aa_mut_freq = (v_region_nb_of_aa / v_region_nb_of_aa_changes) * 100,
           
           contains_avy_in_fr1 = grepl(\"AVY\", aa_fr1), ## Detects AVY in FR1
           contains_qw_in_fr1 = grepl(\"QW\", aa_fr1), ## Detects QW in FR1
           
           fr1_pct_mutations_in_hotspots = fr1_hotspot_muts / fr1_imgt_nb_of_mutations * 100, ## Hotspot mutation   summary analysis
           fr2_pct_mutations_in_hotspots = fr2_hotspot_muts / fr2_imgt_nb_of_mutations * 100,
           fr3_pct_mutations_in_hotspots = fr3_hotspot_muts / fr3_imgt_nb_of_mutations * 100,
           fr_hotspot_muts = fr1_hotspot_muts + fr2_hotspot_muts + fr3_hotspot_muts,
           fr_pct_mutations_in_hotspots = fr_hotspot_muts / fr_imgt_nb_of_mutations * 100,
           cdr1_pct_mutations_in_hotspots = cdr1_hotspot_muts / cdr1_imgt_nb_of_mutations * 100,
           cdr2_pct_mutations_in_hotspots = cdr2_hotspot_muts / cdr2_imgt_nb_of_mutations * 100,
           cdr_hotspot_muts = cdr1_hotspot_muts + cdr2_hotspot_muts,
           cdr_pct_mutations_in_hotspots = cdr_hotspot_muts / cdr_imgt_nb_of_mutations * 100,
           non_junction_pct_mutations_in_hotspots =  (fr_hotspot_muts + cdr_hotspot_muts) / (fr_imgt_nb_of_mutations + cdr_imgt_nb_of_mutations) * 100,
           cdr3_pct_mutations_in_hotspots = cdr3_hotspot_muts / cdr3_imgt_nb_of_mutations * 100,
           
           fr1_pct_hotspots_mutated = fr1_hotspot_muts / fr1_hotspot_loci * 100,
           fr2_pct_hotspots_mutated = fr2_hotspot_muts / fr2_hotspot_loci * 100,
           fr3_pct_hotspots_mutated = fr3_hotspot_muts / fr3_hotspot_loci * 100,
           fr_hotspot_loci = fr1_hotspot_loci + fr2_hotspot_loci + fr3_hotspot_loci,
           fr_pct_hotspots_mutated = fr_hotspot_muts / fr_hotspot_loci * 100,
           cdr1_pct_hotspots_mutated = cdr1_hotspot_muts / cdr1_hotspot_loci * 100,
           cdr2_pct_hotspots_mutated = cdr2_hotspot_muts / cdr2_hotspot_loci * 100,
           cdr_hotspot_loci = cdr1_hotspot_loci + cdr2_hotspot_loci,
           cdr_pct_hotspots_mutated = cdr_hotspot_muts / cdr_hotspot_loci * 100,
           non_junction_pct_hotspots_mutated = (fr_hotspot_muts + cdr_hotspot_muts) / (fr_hotspot_loci + cdr_hotspot_loci) * 100,
           cdr3_pct_hotspots_mutated = cdr3_hotspot_muts / cdr3_hotspot_loci * 100) 
  message(paste(sample_index, \"Detailed Statistics Processed: Step 10/10 \nWriting Results to disk\"),
          sep = \"\n\")
  ##Bring in processed CellRanger annotations
  processed_cellranger_annotations <- read_csv(paste0(summary_dir,
                                                      \"/../SuPERR-Seq_processed/filtered_annotations_\",
                                                      sample_index, \".csv\"))
  
  #Merge in the data
  merged_tibble <- left_join(processed_cellranger_annotations, combined_tibble, by = c(\"indexed_contig_id\" = \"sequence_id\"))
  isotypes <- merged_tibble %>% filter(chain_type == \"igh\") %>% select(indexed_barcode, 
                                                                       isotype = c_gene)
  isotypes$isotype <- tolower(gsub(\"IGH(.*)\", \"\\1\", isotypes$isotype))
  merged_tibble <- left_join(merged_tibble, isotypes, by = \"indexed_barcode\")
  ##Arrange the tibble for ease of future processing.
  merged_tibble <- merged_tibble %>%
                   select(indexed_contig_id:seq,
                          chain_type, 
                          isotype,
                          reads:j_region_identity_pct,
                          nt_vdj:aa_gapped_j,
                          fr1_nt_mut_freq:contains_qw_in_fr1,
                          \"v_region_nb_of_positions_including_imgt_gaps_(nt)\":cdr3_imgt_very_dissimilar,
                          fr1_hotspot_loci:non_junction_hotspot_muts,
                          fr1_pct_mutations_in_hotspots:cdr3_pct_hotspots_mutated)
   wide_tibble <- convert_vdj_to_wide(merged_tibble) 
   convert_wide_to_seurat(df = wide_tibble, summary_dir)
  ##Write the summary files
  setwd(outs_dir)
  ##Return the long table
  write_csv(merged_tibble, paste0(\"superrseq_processed_long_imgt_output.index_\", 
                                       sample_index, \".csv\"))
  ##Return the wide table
  write_csv(wide_tibble, paste0(\"superrseq_processed_wide_imgt_output.index_\", 
                                       sample_index, \".csv\"))
}



```"
